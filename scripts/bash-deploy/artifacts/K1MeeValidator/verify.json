{"language":"Solidity","sources":{"contracts/validators/K1MeeValidator.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.27;\n\nimport {IValidator, MODULE_TYPE_VALIDATOR} from \"erc7579/interfaces/IERC7579Module.sol\";\nimport {ISessionValidator} from \"contracts/interfaces/ISessionValidator.sol\";\nimport {EnumerableSet} from \"EnumerableSet4337/EnumerableSet4337.sol\";\nimport {PackedUserOperation} from \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport {ERC7739Validator} from \"erc7739Validator/ERC7739Validator.sol\";\nimport {\n    SIG_TYPE_SIMPLE,\n    SIG_TYPE_ON_CHAIN,\n    SIG_TYPE_ERC20_PERMIT,\n    EIP1271_SUCCESS,\n    EIP1271_FAILED,\n    MODULE_TYPE_STATELESS_VALIDATOR,\n    SIG_TYPE_MEE_FLOW\n} from \"contracts/types/Constants.sol\";\n// Fusion libraries - validate userOp using on-chain tx or off-chain permit\nimport {PermitValidatorLib} from \"../lib/fusion/PermitValidatorLib.sol\";\nimport {TxValidatorLib} from \"../lib/fusion/TxValidatorLib.sol\";\nimport {SimpleValidatorLib} from \"../lib/fusion/SimpleValidatorLib.sol\";\nimport {NoMeeFlowLib} from \"../lib/fusion/NoMeeFlowLib.sol\";\nimport {EcdsaLib} from \"../lib/util/EcdsaLib.sol\";\n\n/**\n * @title K1MeeValidator\n * @dev   An ERC-7579 validator (module type 1) and stateless validator (module type 7) for the MEE stack.\n *        Supports 3 MEE modes:\n *        - Simple (Super Tx hash is signed)\n *        - On-chain Tx (Super Tx hash is appended to a regular txn and signed)\n *        - ERC-2612 Permit (Super Tx hash is pasted into deadline field of the ERC-2612 Permit and signed)\n *\n *        Further improvements:\n *        - Further gas optimizations\n *        - Use EIP-712 to make superTx hash not blind => use 7739 for the MEE 1271 flows\n *\n *        Using erc7739 for MEE flows makes no sense currently because user signs blind hashes anyways\n *        (except permit mode, but the superTx hash is still blind in it).\n *        So we just hash smart account address into the og hash for 1271 MEE flow currently.\n *        In future full scale 7739 will replace it when superTx hash is 712 and transparent.\n *\n */\n\ncontract K1MeeValidator is IValidator, ISessionValidator, ERC7739Validator {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    /*//////////////////////////////////////////////////////////////////////////\n                            CONSTANTS & STORAGE\n    //////////////////////////////////////////////////////////////////////////*/\n\n    uint256 private constant ENCODED_DATA_OFFSET = 4;\n    \n    /// @notice Mapping of smart account addresses to their respective owner addresses\n    mapping(address => address) public smartAccountOwners;\n\n    /// @notice Set of safe senders for each smart account\n    EnumerableSet.AddressSet private _safeSenders;\n\n    /// @notice Error to indicate that no owner was provided during installation\n    error NoOwnerProvided();\n\n    /// @notice Error to indicate that the new owner cannot be the zero address\n    error ZeroAddressNotAllowed();\n\n    /// @notice Error to indicate the module is already initialized\n    error ModuleAlreadyInitialized();\n\n    /// @notice Error to indicate that the new owner cannot be a contract address\n    error NewOwnerIsNotEOA();\n\n    /// @notice Error to indicate that the owner cannot be the zero address\n    error OwnerCannotBeZeroAddress();\n\n    /// @notice Error to indicate that the data length is invalid\n    error InvalidDataLength();\n\n    /// @notice Error to indicate that the safe senders length is invalid\n    error SafeSendersLengthInvalid();\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONFIG\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /**\n     * Initialize the module with the given data\n     *\n     * @param data The data to initialize the module with\n     */\n    function onInstall(bytes calldata data) external override {\n        require(data.length != 0, NoOwnerProvided());\n        require(!_isInitialized(msg.sender), ModuleAlreadyInitialized());\n        address newOwner = address(bytes20(data[:20]));\n        require(newOwner != address(0), OwnerCannotBeZeroAddress());\n        if (_isNotEOA(newOwner)) {\n            revert NewOwnerIsNotEOA();\n        }\n        smartAccountOwners[msg.sender] = newOwner;\n        if (data.length > 20) {\n            _fillSafeSenders(data[20:]);\n        }\n    }\n\n    /**\n     * De-initialize the module with the given data\n     */\n    function onUninstall(bytes calldata) external override {\n        delete smartAccountOwners[msg.sender];\n        _safeSenders.removeAll(msg.sender);\n    }\n\n    /// @notice Transfers ownership of the validator to a new owner\n    /// @param newOwner The address of the new owner\n    function transferOwnership(address newOwner) external {\n        require(newOwner != address(0), ZeroAddressNotAllowed());\n        if (_isNotEOA(newOwner)) {\n            revert NewOwnerIsNotEOA();\n        }\n        smartAccountOwners[msg.sender] = newOwner;\n    }\n\n    /**\n     * Check if the module is initialized\n     * @param smartAccount The smart account to check\n     *\n     * @return true if the module is initialized, false otherwise\n     */\n    function isInitialized(address smartAccount) external view returns (bool) {\n        return _isInitialized(smartAccount);\n    }\n\n    /// @notice Adds a safe sender to the _safeSenders list for the smart account\n    function addSafeSender(address sender) external {\n        _safeSenders.add(msg.sender, sender);\n    }\n\n    /// @notice Removes a safe sender from the _safeSenders list for the smart account\n    function removeSafeSender(address sender) external {\n        _safeSenders.remove(msg.sender, sender);\n    }\n\n    /// @notice Checks if a sender is in the _safeSenders list for the smart account\n    function isSafeSender(address sender, address smartAccount) external view returns (bool) {\n        return _safeSenders.contains(smartAccount, sender);\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     MODULE LOGIC\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /**\n     * Validates PackedUserOperation\n     *\n     * @param userOp UserOperation to be validated\n     * @param userOpHash Hash of the UserOperation to be validated\n     * @dev fallback flow => non MEE flow => no dedicated prefix introduced for the sake of compatibility.\n     *      It may lead to a case where some signature turns out to have first bytes matching the prefix.\n     *      However, this is very unlikely to happen and even if it does, the consequences are just\n     *      that the signature is not validated which is easily solved by altering userOp => hash => sig.\n     *      The userOp.signature is encoded as follows:\n     *      MEE flow: [65 bytes node master signature] [4 bytes sigType] [encoded data for this validator]\n     *      Non-MEE flow: [65 bytes regular secp256k1 sig]\n     *\n     * @return uint256 the result of the signature validation, which can be:\n     *  - 0 if the signature is valid\n     *  - 1 if the signature is invalid\n     *  - <20-byte> aggregatorOrSigFail, <6-byte> validUntil and <6-byte> validAfter (see ERC-4337\n     * for more details)\n     */\n    function validateUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash)\n        external\n        override\n        returns (uint256)\n    {   \n        address owner = getOwner(userOp.sender);\n        if (userOp.signature.length < ENCODED_DATA_OFFSET) {\n            // if sig is short then we are sure it is a non-MEE flow\n            return NoMeeFlowLib.validateUserOp(userOpHash, userOp.signature, owner);\n        } else {\n            bytes4 sigType = bytes4(userOp.signature[0:ENCODED_DATA_OFFSET]);\n            if (sigType == SIG_TYPE_SIMPLE) {\n                return SimpleValidatorLib.validateUserOp(userOpHash, userOp.signature[ENCODED_DATA_OFFSET:], owner);\n            } else if (sigType == SIG_TYPE_ON_CHAIN) {\n                return TxValidatorLib.validateUserOp(userOpHash, userOp.signature[ENCODED_DATA_OFFSET:userOp.signature.length - 65], owner);\n            } else if (sigType == SIG_TYPE_ERC20_PERMIT) {\n                return PermitValidatorLib.validateUserOp(userOpHash, userOp.signature[ENCODED_DATA_OFFSET:], owner);\n            } else {\n                // fallback flow => non MEE flow => no prefix\n                return NoMeeFlowLib.validateUserOp(userOpHash, userOp.signature, owner);\n            }\n        }\n    }\n\n    /**\n     * Validates an ERC-1271 signature\n     *\n     * @param sender The sender of the ERC-1271 call to the account\n     * @param hash The hash of the message\n     * @param signature The signature of the message\n     *\n     * @return sigValidationResult the result of the signature validation, which can be:\n     *  - EIP1271_SUCCESS if the signature is valid\n     *  - EIP1271_FAILED if the signature is invalid\n     */\n    function isValidSignatureWithSender(address sender, bytes32 hash, bytes calldata signature)\n        external\n        view\n        virtual\n        override\n        returns (bytes4 sigValidationResult)\n    {\n        if (bytes3(signature[0:3]) != SIG_TYPE_MEE_FLOW) {\n            // Non MEE 7739 flow\n            // goes to ERC7739Validator to apply 7739 magic and then returns back\n            // to this contract's _erc1271IsValidSignatureNowCalldata() method.\n            return _erc1271IsValidSignatureWithSender(sender, hash, _erc1271UnwrapSignature(signature));\n        } else {\n            // non-7739 flow\n            // hash the SA into the `hash` to protect against two SA's with same owner vector\n            return _validateSignatureForOwner(\n                getOwner(msg.sender), keccak256(abi.encodePacked(hash, msg.sender)), _erc1271UnwrapSignature(signature)\n            ) ? EIP1271_SUCCESS : EIP1271_FAILED;\n        }\n    }\n\n    /// @notice ISessionValidator interface for smart session\n    /// @param hash The hash of the data to validate\n    /// @param sig The signature data\n    /// @param data The data to validate against (owner address in this case)\n    function validateSignatureWithData(bytes32 hash, bytes calldata sig, bytes calldata data)\n        external\n        view\n        returns (bool validSig)\n    {\n        require(data.length >= 20, InvalidDataLength());\n        return _validateSignatureForOwner(address(bytes20(data[:20])), hash, sig);\n    }\n\n    /**\n     * Get the owner of the smart account\n     * @param smartAccount The address of the smart account\n     * @return The owner of the smart account\n     */\n    function getOwner(address smartAccount) public view returns (address) {\n        address owner = smartAccountOwners[smartAccount];\n        return owner == address(0) ? smartAccount : owner;\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     METADATA\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice Returns the name of the module\n    /// @return The name of the module\n    function name() external pure returns (string memory) {\n        return \"K1MeeValidator\";\n    }\n\n    /// @notice Returns the version of the module\n    /// @return The version of the module\n    /// @dev\n    /// - supports appended 65-bytes signature for on-chain fusion mode\n    /// - supports erc7702-delegated EOAs as owners  \n    function version() external pure returns (string memory) {\n        return \"1.0.2\";\n    }\n\n    /// @notice Checks if the module is of the specified type\n    /// @param typeId The type ID to check\n    /// @return True if the module is of the specified type, false otherwise\n    function isModuleType(uint256 typeId) external pure returns (bool) {\n        return typeId == MODULE_TYPE_VALIDATOR || typeId == MODULE_TYPE_STATELESS_VALIDATOR;\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     INTERNAL\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice Internal method that does the job of validating the signature via ECDSA (secp256k1)\n    /// @param owner The address of the owner\n    /// @param hash The hash of the data to validate\n    /// @param signature The signature data\n    function _validateSignatureForOwner(address owner, bytes32 hash, bytes calldata signature)\n        internal\n        view\n        returns (bool)\n    {\n        bytes4 sigType = bytes4(signature[0:4]);\n\n        if (sigType == SIG_TYPE_SIMPLE) {\n            return SimpleValidatorLib.validateSignatureForOwner(owner, hash, signature[4:]);\n        } else if (sigType == SIG_TYPE_ON_CHAIN) {\n            return TxValidatorLib.validateSignatureForOwner(owner, hash, signature[4:]);\n        } else if (sigType == SIG_TYPE_ERC20_PERMIT) {\n            return PermitValidatorLib.validateSignatureForOwner(owner, hash, signature[4:]);\n        } else {\n            // fallback flow => non MEE flow => no prefix\n            return NoMeeFlowLib.validateSignatureForOwner(owner, hash, signature);\n        }\n    }\n\n    /// @notice Checks if the smart account is initialized with an owner\n    /// @param smartAccount The address of the smart account\n    /// @return True if the smart account has an owner, false otherwise\n    function _isInitialized(address smartAccount) private view returns (bool) {\n        return smartAccountOwners[smartAccount] != address(0);\n    }\n\n    // @notice Fills the _safeSenders list from the given data\n    function _fillSafeSenders(bytes calldata data) private {\n        require(data.length % 20 == 0, SafeSendersLengthInvalid());\n        for (uint256 i; i < data.length / 20; i++) {\n            _safeSenders.add(msg.sender, address(bytes20(data[20 * i:20 * (i + 1)])));\n        }\n    }\n\n    /// @notice Checks if the address is a contract\n    /// @param account The address to check\n    /// @return True if the address is a contract, false otherwise\n    function _isNotEOA(address account) private view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        // has code and is not delegated via eip-7702\n        return (size > 0) && (size != 23);\n    }\n\n    /// @dev Returns whether the `hash` and `signature` are valid.\n    ///      Obtains the authorized signer's credentials and calls some\n    ///      module's specific internal function to validate the signature\n    ///      against credentials.\n    function _erc1271IsValidSignatureNowCalldata(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        // call custom internal function to validate the signature against credentials\n        return EcdsaLib.isValidSignature(getOwner(msg.sender), hash, signature);\n    }\n\n    /// @dev Returns whether the `sender` is considered safe, such\n    /// that we don't need to use the nested EIP-712 workflow.\n    /// See: https://mirror.xyz/curiousapple.eth/pFqAdW2LiJ-6S4sg_u1z08k4vK6BCJ33LcyXpnNb8yU\n    // The canonical `MulticallerWithSigner` at 0x000000000000D9ECebf3C23529de49815Dac1c4c\n    // is known to include the account in the hash to be signed.\n    // msg.sender = Smart Account\n    // sender = 1271 og request sender\n    function _erc1271CallerIsSafe(address sender) internal view virtual override returns (bool) {\n        return (\n            sender == 0x000000000000D9ECebf3C23529de49815Dac1c4c // MulticallerWithSigner\n                || sender == msg.sender // Smart Account. Assume smart account never sends non safe eip-712 struct\n                || _safeSenders.contains(msg.sender, sender)\n        ); // check if sender is in _safeSenders for the Smart Account\n    }\n}\n"},"node_modules/erc7579/src/interfaces/IERC7579Module.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport { PackedUserOperation } from \"account-abstraction/interfaces/PackedUserOperation.sol\";\n\nuint256 constant VALIDATION_SUCCESS = 0;\nuint256 constant VALIDATION_FAILED = 1;\n\nuint256 constant MODULE_TYPE_VALIDATOR = 1;\nuint256 constant MODULE_TYPE_EXECUTOR = 2;\nuint256 constant MODULE_TYPE_FALLBACK = 3;\nuint256 constant MODULE_TYPE_HOOK = 4;\nuint256 constant MODULE_TYPE_PREVALIDATION_HOOK_ERC1271 = 8;\nuint256 constant MODULE_TYPE_PREVALIDATION_HOOK_ERC4337 = 9;\n\ninterface IModule {\n    error AlreadyInitialized(address smartAccount);\n    error NotInitialized(address smartAccount);\n\n    /**\n     * @dev This function is called by the smart account during installation of the module\n     * @param data arbitrary data that may be required on the module during `onInstall`\n     * initialization\n     *\n     * MUST revert on error (i.e. if module is already enabled)\n     */\n    function onInstall(bytes calldata data) external;\n\n    /**\n     * @dev This function is called by the smart account during uninstallation of the module\n     * @param data arbitrary data that may be required on the module during `onUninstall`\n     * de-initialization\n     *\n     * MUST revert on error\n     */\n    function onUninstall(bytes calldata data) external;\n\n    /**\n     * @dev Returns boolean value if module is a certain type\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\n     *\n     * MUST return true if the module is of the given type and false otherwise\n     */\n    function isModuleType(uint256 moduleTypeId) external view returns (bool);\n\n    /**\n     * @dev Returns if the module was already initialized for a provided smartaccount\n     */\n    function isInitialized(address smartAccount) external view returns (bool);\n}\n\ninterface IValidator is IModule {\n    error InvalidTargetAddress(address target);\n\n    /**\n     * @dev Validates a transaction on behalf of the account.\n     *         This function is intended to be called by the MSA during the ERC-4337 validaton phase\n     *         Note: solely relying on bytes32 hash and signature is not suffcient for some\n     * validation implementations (i.e. SessionKeys often need access to userOp.calldata)\n     * @param userOp The user operation to be validated. The userOp MUST NOT contain any metadata.\n     * The MSA MUST clean up the userOp before sending it to the validator.\n     * @param userOpHash The hash of the user operation to be validated\n     * @return return value according to ERC-4337\n     */\n    function validateUserOp(\n        PackedUserOperation calldata userOp,\n        bytes32 userOpHash\n    )\n        external\n        returns (uint256);\n\n    /**\n     * Validator can be used for ERC-1271 validation\n     */\n    function isValidSignatureWithSender(\n        address sender,\n        bytes32 hash,\n        bytes calldata data\n    )\n        external\n        view\n        returns (bytes4);\n}\n\ninterface IExecutor is IModule { }\n\ninterface IHook is IModule {\n    function preCheck(\n        address msgSender,\n        uint256 msgValue,\n        bytes calldata msgData\n    )\n        external\n        returns (bytes memory hookData);\n\n    function postCheck(bytes calldata hookData) external;\n}\n\ninterface IFallback is IModule { }\n\ninterface IPreValidationHookERC1271 is IModule {\n    function preValidationHookERC1271(\n        address sender,\n        bytes32 hash,\n        bytes calldata data\n    )\n        external\n        view\n        returns (bytes32 hookHash, bytes memory hookSignature);\n}\n\ninterface IPreValidationHookERC4337 is IModule {\n    function preValidationHookERC4337(\n        PackedUserOperation calldata userOp,\n        uint256 missingAccountFunds,\n        bytes32 userOpHash\n    )\n        external\n        returns (bytes32 hookHash, bytes memory hookSignature);\n}\n"},"contracts/interfaces/ISessionValidator.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.23;\n\nimport {IModule} from \"erc7579/interfaces/IERC7579Module.sol\";\n\nuint256 constant ERC7579_MODULE_TYPE_STATELESS_VALIDATOR = 7;\n\n/**\n * ISessionValidator is a contract that validates signatures for a given session.\n * this interface expects to validate the signature in a stateless way.\n * all parameters required to validate the signature are passed in the function call.\n * Only one ISessionValidator is responsible to validate a userOp.\n * if you want to use multiple validators, you can create a ISessionValidator that aggregates multiple signatures that\n * are packed into userOp.signature\n * It is used to validate the signature of a session.\n *  hash The userOp hash\n *  sig The signature of userOp\n *  data the config data that is used to validate the signature\n */\ninterface ISessionValidator is IModule {\n    function validateSignatureWithData(bytes32 hash, bytes calldata sig, bytes calldata data)\n        external\n        view\n        returns (bool validSig);\n}\n"},"node_modules/enumerablemap4337/src/EnumerableSet4337.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport \"./AssociatedArrayLib.sol\";\n\n/**\n * Fork of OZ's EnumerableSet that makes all storage access ERC-4337 compliant via associated storage\n * @author zeroknots.eth (rhinestone)\n */\nlibrary EnumerableSet {\n    using AssociatedArrayLib for AssociatedArrayLib.Bytes32Array;\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        AssociatedArrayLib.Bytes32Array _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => mapping(address account => uint256)) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, address account, bytes32 value) private returns (bool) {\n        if (!_contains(set, account, value)) {\n            set._values.push(account, value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value][account] = set._values.length(account);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, address account, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value][account];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length(account) - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values.get(account, lastIndex);\n\n                // Move the lastValue to the index where the value to delete is\n                set._values.set(account, valueIndex, lastValue);\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue][account] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop(account);\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value][account];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _removeAll(Set storage set, address account) internal {\n        // get length of the array\n        uint256 len = _length(set, account);\n        for (uint256 i = 1; i <= len; i++) {\n            // get last value\n            bytes32 value = _at(set, account, len - i);\n            _remove(set, account, value);\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, address account, bytes32 value) private view returns (bool) {\n        return set._positions[value][account] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set, address account) private view returns (uint256) {\n        return set._values.length(account);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, address account, uint256 index) private view returns (bytes32) {\n        return set._values.get(account, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set, address account) private view returns (bytes32[] memory) {\n        return set._values.getAll(account);\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, address account, bytes32 value) internal returns (bool) {\n        return _add(set._inner, account, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, address account, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, account, value);\n    }\n\n    function removeAll(Bytes32Set storage set, address account) internal {\n        return _removeAll(set._inner, account);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, address account, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, account, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set, address account) internal view returns (uint256) {\n        return _length(set._inner, account);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, address account, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, account, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set, address account) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner, account);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address account, address value) internal returns (bool) {\n        return _add(set._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address account, address value) internal returns (bool) {\n        return _remove(set._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    function removeAll(AddressSet storage set, address account) internal {\n        return _removeAll(set._inner, account);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address account, address value) internal view returns (bool) {\n        return _contains(set._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set, address account) internal view returns (uint256) {\n        return _length(set._inner, account);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, address account, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, account, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set, address account) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner, account);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, address account, uint256 value) internal returns (bool) {\n        return _add(set._inner, account, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, address account, uint256 value) internal returns (bool) {\n        return _remove(set._inner, account, bytes32(value));\n    }\n\n    function removeAll(UintSet storage set, address account) internal {\n        return _removeAll(set._inner, account);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, address account, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, account, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set, address account) internal view returns (uint256) {\n        return _length(set._inner, account);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, address account, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, account, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set, address account) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner, account);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"node_modules/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\n/**\n * User Operation struct\n * @param sender                - The sender account of this request.\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\n * @param initCode              - If set, the account contract will be created by this constructor/\n * @param callData              - The method call to execute on this account.\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\n *                                Covers batch overhead.\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\n *                                The paymaster will pay for the transaction instead of the sender.\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n */\nstruct PackedUserOperation {\n    address sender;\n    uint256 nonce;\n    bytes initCode;\n    bytes callData;\n    bytes32 accountGasLimits;\n    uint256 preVerificationGas;\n    bytes32 gasFees;\n    bytes paymasterAndData;\n    bytes signature;\n}\n"},"node_modules/erc7739-validator-base/src/ERC7739Validator.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\ninterface IERC5267 {\n    function eip712Domain() external view returns (\n        bytes1 fields,\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract,\n        bytes32 salt,\n        uint256[] memory extensions\n    );\n}\n\n/// @title ERC-7739: Nested Typed Data Sign Support for ERC-7579 Validators\nabstract contract ERC7739Validator {\n    error InvalidSignature();\n    \n    /// @dev `keccak256(\"PersonalSign(bytes prefixed)\")`.\n    bytes32 internal constant _PERSONAL_SIGN_TYPEHASH = 0x983e65e5148e570cd828ead231ee759a8d7958721a768f93bc4483ba005c32de;\n    bytes32 internal constant _DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n    bytes4 internal constant SUPPORTS_ERC7739_V1 = 0x77390001;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     INTERNAL\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /// @dev Returns whether the `signature` is valid for the `hash.\n    /// Use this in your validator's `isValidSignatureWithSender` implementation.\n    function _erc1271IsValidSignatureWithSender(address sender, bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bytes4)\n    {   \n        // detection request\n        // this check only takes 17 gas units\n        // in theory, it can be moved out of this function so it doesn't apply to every\n        // isValidSignatureWithSender() call, but it would require an additional standard\n        // interface for SA to check if the IValidator supports ERC-7739\n        // while isValidSignatureWithSender() is specified by ERC-7579, so\n        // it makes sense to use it in SA to check if the validator supports ERC-7739\n        unchecked {\n            if (signature.length == uint256(0)) {\n                // Forces the compiler to optimize for smaller bytecode size.\n                if (uint256(hash) == ~signature.length / 0xffff * 0x7739) \n                    return SUPPORTS_ERC7739_V1;\n            }\n        }\n\n        // sig malleability prevention\n        bytes32 s;\n        assembly {\n            // same as `s := mload(add(signature, 0x40))` but for calldata\n            s := calldataload(add(signature.offset, 0x20))\n        }\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert InvalidSignature();\n        }\n\n        bool success = _erc1271IsValidSignatureViaSafeCaller(sender, hash, signature)\n            || _erc1271IsValidSignatureViaNestedEIP712(hash, signature)\n            || _erc1271IsValidSignatureViaRPC(hash, signature);\n\n        bytes4 sigValidationResult;\n        assembly {\n            // `success ? bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")) : 0xffffffff`.\n            // We use `0xffffffff` for invalid, in convention with the reference implementation.\n            sigValidationResult := shl(224, or(0x1626ba7e, sub(0, iszero(success))))\n        }\n        return sigValidationResult;\n    }\n\n    /// @dev Returns whether the `msg.sender` is considered safe, such\n    /// that we don't need to use the nested EIP-712 workflow.\n    /// Override to return true for more callers.\n    /// See: https://mirror.xyz/curiousapple.eth/pFqAdW2LiJ-6S4sg_u1z08k4vK6BCJ33LcyXpnNb8yU\n    function _erc1271CallerIsSafe(address sender) internal view virtual returns (bool) {\n        // The canonical `MulticallerWithSigner` at 0x000000000000D9ECebf3C23529de49815Dac1c4c\n        // is known to include the account in the hash to be signed.\n        return sender == 0x000000000000D9ECebf3C23529de49815Dac1c4c;\n    }\n\n    /// @dev Returns whether the `hash` and `signature` are valid.\n    ///      Obtains the authorized signer's credentials and calls some\n    ///      module's specific internal function to validate the signature\n    ///      against credentials.\n    /// Override for your module's custom logic.\n    function _erc1271IsValidSignatureNowCalldata(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool);\n\n    /// @dev Unwraps and returns the signature.\n    function _erc1271UnwrapSignature(bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bytes calldata result)\n    {\n        result = signature;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Unwraps the ERC6492 wrapper if it exists.\n            // See: https://eips.ethereum.org/EIPS/eip-6492\n            if eq(\n                calldataload(add(result.offset, sub(result.length, 0x20))),\n                mul(0x6492, div(not(shr(address(), address())), 0xffff)) // `0x6492...6492`.\n            ) {\n                let o := add(result.offset, calldataload(add(result.offset, 0x40)))\n                result.length := calldataload(o)\n                result.offset := add(o, 0x20)\n            }\n        }\n    }\n\n    /// @dev Performs the signature validation without nested EIP-712 if the caller is\n    /// a safe caller. A safe caller must include the address of this account in the hash.\n    function _erc1271IsValidSignatureViaSafeCaller(address sender, bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        if (_erc1271CallerIsSafe(sender)) result = _erc1271IsValidSignatureNowCalldata(hash, signature);\n    }\n\n    /// @dev ERC1271 signature validation (Nested EIP-712 workflow).\n    ///\n    /// This uses ECDSA recovery by default (see: `_erc1271IsValidSignatureNowCalldata`).\n    /// It also uses a nested EIP-712 approach to prevent signature replays when a single EOA\n    /// owns multiple smart contract accounts,\n    /// while still enabling wallet UIs (e.g. Metamask) to show the EIP-712 values.\n    ///\n    /// Crafted for phishing resistance, efficiency, flexibility.\n    /// __________________________________________________________________________________________\n    ///\n    /// Glossary:\n    ///\n    /// - `APP_DOMAIN_SEPARATOR`: The domain separator of the `hash` passed in by the application.\n    ///   Provided by the front end. Intended to be the domain separator of the contract\n    ///   that will call `isValidSignature` on this account.\n    ///\n    /// - `ACCOUNT_DOMAIN_SEPARATOR`: The domain separator of this account.\n    ///   See: `EIP712._domainSeparator()`.\n    /// __________________________________________________________________________________________\n    ///\n    /// For the `TypedDataSign` workflow, the final hash will be:\n    /// ```\n    ///     keccak256(\\x19\\x01 ‖ APP_DOMAIN_SEPARATOR ‖\n    ///         hashStruct(TypedDataSign({\n    ///             contents: hashStruct(originalStruct),\n    ///             name: keccak256(bytes(eip712Domain().name)),\n    ///             version: keccak256(bytes(eip712Domain().version)),\n    ///             chainId: eip712Domain().chainId,\n    ///             verifyingContract: eip712Domain().verifyingContract,\n    ///             salt: eip712Domain().salt\n    ///         }))\n    ///     )\n    /// ```\n    /// where `‖` denotes the concatenation operator for bytes.\n    /// The order of the fields is important: `contents` comes before `name`.\n    ///\n    /// The signature will be `r ‖ s ‖ v ‖ APP_DOMAIN_SEPARATOR ‖\n    ///     contents ‖ contentsDescription ‖ uint16(contentsDescription.length)`,\n    /// where:\n    /// - `contents` is the bytes32 struct hash of the original struct.\n    /// - `contentsDescription` can be either:\n    ///     a) `contentsType` (implicit mode)\n    ///         where `contentsType` starts with `contentsName`.\n    ///     b) `contentsType ‖ contentsName` (explicit mode)\n    ///         where `contentsType` may not necessarily start with `contentsName`.\n    ///\n    /// The `APP_DOMAIN_SEPARATOR` and `contents` will be used to verify if `hash` is indeed correct.\n    /// __________________________________________________________________________________________\n    ///\n    /// For the `PersonalSign` workflow, the final hash will be:\n    /// ```\n    ///     keccak256(\\x19\\x01 ‖ ACCOUNT_DOMAIN_SEPARATOR ‖\n    ///         hashStruct(PersonalSign({\n    ///             prefixed: keccak256(bytes(\\x19Ethereum Signed Message:\\n ‖\n    ///                 base10(bytes(someString).length) ‖ someString))\n    ///         }))\n    ///     )\n    /// ```\n    /// where `‖` denotes the concatenation operator for bytes.\n    ///\n    /// The `PersonalSign` type hash will be `keccak256(\"PersonalSign(bytes prefixed)\")`.\n    /// The signature will be `r ‖ s ‖ v`.\n    /// __________________________________________________________________________________________\n    ///\n    /// For demo and typescript code, see:\n    /// - https://github.com/junomonster/nested-eip-712\n    /// - https://github.com/frangio/eip712-wrapper-for-eip1271\n    ///\n    /// Their nomenclature may differ from ours, although the high-level idea is similar.\n    ///\n    /// Of course, if you have control over the codebase of the wallet client(s) too,\n    /// you can choose a more minimalistic signature scheme like\n    /// `keccak256(abi.encode(address(this), hash))` instead of all these acrobatics.\n    /// All these are just for widespread out-of-the-box compatibility with other wallet clients.\n    /// We want to create bazaars, not walled castles.\n    /// And we'll use push the Turing Completeness of the EVM to the limits to do so.\n    function _erc1271IsValidSignatureViaNestedEIP712(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        //bytes32 t = _typedDataSignFieldsForAccount(msg.sender);\n        uint256 t = uint256(uint160(address(this)));\n        // Forces the compiler to pop the variables after the scope, avoiding stack-too-deep.\n        if (t != uint256(0)) {\n            (\n                ,\n                string memory name,\n                string memory version,\n                uint256 chainId,\n                address verifyingContract,\n                bytes32 salt,\n            ) = IERC5267(msg.sender).eip712Domain();\n            /// @solidity memory-safe-assembly\n            assembly {\n                t := mload(0x40) // Grab the free memory pointer.\n                // Skip 2 words for the `typedDataSignTypehash` and `contents` struct hash.\n                mstore(add(t, 0x40), keccak256(add(name, 0x20), mload(name)))\n                mstore(add(t, 0x60), keccak256(add(version, 0x20), mload(version)))\n                mstore(add(t, 0x80), chainId)\n                mstore(add(t, 0xa0), shr(96, shl(96, verifyingContract)))\n                mstore(add(t, 0xc0), salt)\n                mstore(0x40, add(t, 0xe0)) // Allocate the memory.\n            }\n        }\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            // `c` is `contentsDescription.length`, which is stored in the last 2 bytes of the signature.\n            let c := shr(240, calldataload(add(signature.offset, sub(signature.length, 2))))\n            for {} 1 {} {\n                let l := add(0x42, c) // Total length of appended data (32 + 32 + c + 2).\n                let o := add(signature.offset, sub(signature.length, l)) // Offset of appended data.\n                mstore(0x00, 0x1901) // Store the \"\\x19\\x01\" prefix.\n                calldatacopy(0x20, o, 0x40) // Copy the `APP_DOMAIN_SEPARATOR` and `contents` struct hash.\n                // Use the `PersonalSign` workflow if the reconstructed hash doesn't match,\n                // or if the appended data is invalid, i.e.\n                // `appendedData.length > signature.length || contentsDescription.length == 0`.\n                if or(xor(keccak256(0x1e, 0x42), hash), or(lt(signature.length, l), iszero(c))) {\n                    t := 0 // Set `t` to 0, denoting that we need to `hash = _hashTypedData(hash)`.\n                    mstore(t, _PERSONAL_SIGN_TYPEHASH)\n                    mstore(0x20, hash) // Store the `prefixed`.\n                    hash := keccak256(t, 0x40) // Compute the `PersonalSign` struct hash.\n                    break\n                }\n                // Else, use the `TypedDataSign` workflow.\n                // `TypedDataSign({ContentsName} contents,string name,...){ContentsType}`.\n                mstore(m, \"TypedDataSign(\") // Store the start of `TypedDataSign`'s type encoding.\n                let p := add(m, 0x0e) // Advance 14 bytes to skip \"TypedDataSign(\".\n                \n                calldatacopy(p, add(o, 0x40), c) // Copy `contentsName`, optimistically.\n                mstore(add(p, c), 40) // Store a '(' after the end.\n                if iszero(eq(byte(0, mload(sub(add(p, c), 1))), 41)) {\n                    let e := 0 // Length of `contentsName` in explicit mode.\n                    for { let q := sub(add(p, c), 1) } 1 {} {\n                        e := add(e, 1) // Scan backwards until we encounter a ')'.\n                        if iszero(gt(lt(e, c), eq(byte(0, mload(sub(q, e))), 41))) { break }\n                    }\n                    c := sub(c, e) // Truncate `contentsDescription` to `contentsType`.\n                    calldatacopy(p, add(add(o, 0x40), c), e) // Copy `contentsName`.\n                    mstore8(add(p, e), 40) // Store a '(' exactly right after the end.\n                }\n\n                // `d & 1 == 1` means that `contentsName` is invalid.\n                let d := shr(byte(0, mload(p)), 0x7fffffe000000000000010000000000) // Starts with `[a-z(]`.\n                // Advance `p` until we encounter '('.\n                for {} iszero(eq(byte(0, mload(p)), 40)) { p := add(p, 1) } {\n                    d := or(shr(byte(0, mload(p)), 0x120100000001), d) // Has a byte in \", )\\x00\".\n                }\n                mstore(p, \" contents,string name,string\") // Store the rest of the encoding.\n                mstore(add(p, 0x1c), \" version,uint256 chainId,address\")\n                mstore(add(p, 0x3c), \" verifyingContract,bytes32 salt)\")\n                p := add(p, 0x5c)\n                calldatacopy(p, add(o, 0x40), c) // Copy `contentsType`.\n                // Fill in the missing fields of the `TypedDataSign`.\n                calldatacopy(t, o, 0x40) // Copy the `contents` struct hash to `add(t, 0x20)`.\n                mstore(t, keccak256(m, sub(add(p, c), m))) // Store `typedDataSignTypehash`.\n                // The \"\\x19\\x01\" prefix is already at 0x00.\n                // `APP_DOMAIN_SEPARATOR` is already at 0x20.\n                mstore(0x40, keccak256(t, 0xe0)) // `hashStruct(typedDataSign)`.\n                // Compute the final hash, corrupted if `contentsName` is invalid.\n                hash := keccak256(0x1e, add(0x42, and(1, d)))\n                signature.length := sub(signature.length, l) // Truncate the signature.\n                break\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n        if (t == uint256(0)) hash = _hashTypedDataForAccount(msg.sender, hash); // `PersonalSign` workflow.\n        result = _erc1271IsValidSignatureNowCalldata(hash, signature);\n    }\n\n    /// @dev Performs the signature validation without nested EIP-712 to allow for easy sign ins.\n    /// This function must always return false or revert if called on-chain.\n    function _erc1271IsValidSignatureViaRPC(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        // Non-zero gasprice is a heuristic to check if a call is on-chain,\n        // but we can't fully depend on it because it can be manipulated.\n        // See: https://x.com/NoahCitron/status/1580359718341484544\n        if (tx.gasprice == uint256(0)) {\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(gasprice(), gasprice())\n                // See: https://gist.github.com/Vectorized/3c9b63524d57492b265454f62d895f71\n                let b := 0x000000000000378eDCD5B5B0A24f5342d8C10485 // Basefee contract,\n                pop(staticcall(0xffff, b, codesize(), gasprice(), gasprice(), 0x20))\n                // If `gasprice < basefee`, the call cannot be on-chain, and we can skip the gas burn.\n                if iszero(mload(gasprice())) {\n                    let m := mload(0x40) // Cache the free memory pointer.\n                    mstore(gasprice(), 0x1626ba7e) // `isValidSignature(bytes32,bytes)`.\n                    mstore(0x20, b) // Recycle `b` to denote if we need to burn gas.\n                    mstore(0x40, 0x40)\n                    let gasToBurn := or(add(0xffff, gaslimit()), gaslimit())\n                    // Burns gas computationally efficiently. Also, requires that `gas > gasToBurn`.\n                    if or(eq(hash, b), lt(gas(), gasToBurn)) { invalid() }\n                    // Make a call to this with `b`, efficiently burning the gas provided.\n                    // No valid transaction can consume more than the gaslimit.\n                    // See: https://ethereum.github.io/yellowpaper/paper.pdf\n                    // Most RPCs perform calls with a gas budget greater than the gaslimit.\n                    pop(staticcall(gasToBurn, address(), 0x1c, 0x64, gasprice(), gasprice()))\n                    mstore(0x40, m) // Restore the free memory pointer.\n                }\n            }\n            result = _erc1271IsValidSignatureNowCalldata(hash, signature);\n        }\n    }\n\n    /// @notice Hashes typed data according to eip-712\n    ///         Uses account's domain separator\n    /// @param account the smart account, who's domain separator will be used\n    /// @param structHash the typed data struct hash\n    function _hashTypedDataForAccount(address account, bytes32 structHash) private view returns (bytes32 digest) {\n        (\n            /*bytes1 fields*/,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            /*bytes32 salt*/,\n            /*uint256[] memory extensions*/\n        ) = IERC5267(account).eip712Domain();\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            //Rebuild domain separator out of 712 domain\n            let m := mload(0x40) // Load the free memory pointer.\n            mstore(m, _DOMAIN_TYPEHASH)\n            mstore(add(m, 0x20), keccak256(add(name, 0x20), mload(name))) // Name hash.\n            mstore(add(m, 0x40), keccak256(add(version, 0x20), mload(version))) // Version hash.\n            mstore(add(m, 0x60), chainId)\n            mstore(add(m, 0x80), verifyingContract)\n            digest := keccak256(m, 0xa0) //domain separator\n\n            // Hash typed data\n            mstore(0x00, 0x1901000000000000) // Store \"\\x19\\x01\".\n            mstore(0x1a, digest) // Store the domain separator.\n            mstore(0x3a, structHash) // Store the struct hash.\n            digest := keccak256(0x18, 0x42)\n            // Restore the part of the free memory slot that was overwritten.\n            mstore(0x3a, 0)\n        }\n    }\n\n    /// @dev Backwards compatibility stuff\n    /// For automatic detection that the smart account supports the nested EIP-712 workflow.\n    /// By default, it returns `bytes32(bytes4(keccak256(\"supportsNestedTypedDataSign()\")))`,\n    /// denoting support for the default behavior, as implemented in\n    /// `_erc1271IsValidSignatureViaNestedEIP712`, which is called in `isValidSignature`.\n    /// Future extensions should return a different non-zero `result` to denote different behavior.\n    /// This method intentionally returns bytes32 to allow freedom for future extensions.\n    function supportsNestedTypedDataSign() public view virtual returns (bytes32 result) {\n        result = bytes4(0xd620c85a);\n    }\n\n}\n"},"contracts/types/Constants.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nbytes3 constant SIG_TYPE_MEE_FLOW = 0x177eee;\n\nbytes4 constant SIG_TYPE_SIMPLE = 0x177eee00;\nbytes4 constant SIG_TYPE_ON_CHAIN = 0x177eee01;\nbytes4 constant SIG_TYPE_ERC20_PERMIT = 0x177eee02;\n// ...other sig types: ERC-7683, Permit2, etc\n\nbytes4 constant EIP1271_SUCCESS = 0x1626ba7e;\nbytes4 constant EIP1271_FAILED = 0xffffffff;\n\nuint256 constant MODULE_TYPE_STATELESS_VALIDATOR = 7;\n\nbytes4 constant NODE_PM_MODE_USER = 0x170de000; // refund goes to the user\nbytes4 constant NODE_PM_MODE_DAPP = 0x170de001; // refund goes to the dApp\nbytes4 constant NODE_PM_MODE_KEEP = 0x170de002; // no refund as node sponsored\n\nbytes4 constant NODE_PM_PREMIUM_PERCENT = 0x9ee4ce00; // premium percentage\nbytes4 constant NODE_PM_PREMIUM_FIXED = 0x9ee4ce01; // fixed premium"},"contracts/lib/fusion/PermitValidatorLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\nimport {MerkleProof} from \"openzeppelin/utils/cryptography/MerkleProof.sol\";\nimport {EcdsaLib} from \"../util/EcdsaLib.sol\";\nimport {MEEUserOpHashLib} from \"../util/MEEUserOpHashLib.sol\";\nimport {IERC20Permit} from \"openzeppelin/token/ERC20/extensions/IERC20Permit.sol\";\nimport {IERC20} from \"openzeppelin/token/ERC20/IERC20.sol\";\nimport \"account-abstraction/core/Helpers.sol\";\n\n/**\n * @dev Library to validate the signature for MEE ERC-2612 Permit mode\n *      This is the mode where superTx hash is pasted into deadline field of the ERC-2612 Permit\n *      So the whole permit is signed along with the superTx hash\n *      For more details see Fusion docs:\n *      - https://ethresear.ch/t/fusion-module-7702-alternative-with-no-protocol-changes/20949\n *      - https://docs.biconomy.io/explained/eoa#fusion-module\n *\n *      @dev Important: since ERC20 permit token knows nothing about the MEE, it will treat the superTx hash as a deadline:\n *      -  if (very unlikely) the superTx hash being converted to uint256 is a timestamp in the past, the permit will fail\n *      -  the deadline with most superTx hashes will be very far in the future\n *\n *      @dev Since at this point bytes32 superTx hash is a blind hash, users and wallets should pay attention if\n *           the permit2 deadline field does not make sense as the timestamp. In this case, it can be a sign of a\n *           phishing attempt (injecting super txn hash as the deadline) and the user should not sign the permit.\n *           This is going to be mitigated in the future by making superTx hash a EIP-712 hash.\n */\nbytes32 constant PERMIT_TYPEHASH =\n    keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\nstruct DecodedErc20PermitSig {\n    IERC20Permit token;\n    address spender;\n    bytes32 domainSeparator;\n    uint256 amount;\n    uint256 nonce;\n    bool isPermitTx;\n    bytes32 superTxHash;\n    uint48 lowerBoundTimestamp;\n    uint48 upperBoundTimestamp;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    bytes32[] proof;\n}\n\nstruct DecodedErc20PermitSigShort {\n    address spender;\n    bytes32 domainSeparator;\n    uint256 amount;\n    uint256 nonce;\n    bytes32 superTxHash;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    bytes32[] proof;\n}\n\nlibrary PermitValidatorLib {\n    error PermitFailed();\n\n    uint8 constant EIP_155_MIN_V_VALUE = 37;\n\n    using MessageHashUtils for bytes32;\n\n    /**\n     * This function parses the given userOpSignature into a DecodedErc20PermitSig data structure.\n     *\n     * Once parsed, the function will check for two conditions:\n     *      1. is the userOp part of the merkle tree\n     *      2. is the recovered message signer equal to the expected signer?\n     *\n     * NOTES: This function will revert if either of following is met:\n     *    1. the userOpSignature couldn't be abi.decoded into a valid DecodedErc20PermitSig struct as defined in this contract\n     *    2. userOp is not part of the merkle tree\n     *    3. recovered Permit message signer wasn't equal to the expected signer\n     *\n     * The function will also perform the Permit approval on the given token in case the\n     * isPermitTx flag was set to true in the decoded signature struct.\n     *\n     * @param userOpHash UserOp hash being validated.\n     * @param parsedSignature Signature provided as the userOp.signature parameter (minus the prepended tx type byte).\n     * @param expectedSigner Signer expected to be recovered when decoding the ERC20OPermit signature.\n     */\n    function validateUserOp(bytes32 userOpHash, bytes calldata parsedSignature, address expectedSigner)\n        internal\n        returns (uint256)\n    {\n        DecodedErc20PermitSig memory decodedSig = _decodeFullPermitSig(parsedSignature);\n\n        bytes32 meeUserOpHash = MEEUserOpHashLib.getMEEUserOpHash(\n            userOpHash, decodedSig.lowerBoundTimestamp, decodedSig.upperBoundTimestamp\n        );\n\n        if (\n            !EcdsaLib.isValidSignature(\n                expectedSigner,\n                _getSignedDataHash(expectedSigner, decodedSig),\n                abi.encodePacked(decodedSig.r, decodedSig.s, uint8(decodedSig.v))\n            )\n        ) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        if (!MerkleProof.verify(decodedSig.proof, decodedSig.superTxHash, meeUserOpHash)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        if (decodedSig.isPermitTx) {\n            try decodedSig.token.permit(\n                expectedSigner,\n                decodedSig.spender,\n                decodedSig.amount,\n                uint256(decodedSig.superTxHash),\n                uint8(decodedSig.v),\n                decodedSig.r,\n                decodedSig.s\n            ) {\n                // all good\n            } catch {\n                // check if by some reason this permit was already successfully used (and not spent yet)\n                if (IERC20(address(decodedSig.token)).allowance(expectedSigner, decodedSig.spender) < decodedSig.amount)\n                {\n                    // if the above expectationis not true, revert\n                    revert PermitFailed();\n                }\n            }\n        }\n\n        return _packValidationData(false, decodedSig.upperBoundTimestamp, decodedSig.lowerBoundTimestamp);\n    }\n\n    function validateSignatureForOwner(address expectedSigner, bytes32 dataHash, bytes calldata parsedSignature)\n        internal\n        view\n        returns (bool)\n    {\n        DecodedErc20PermitSigShort calldata decodedSig = _decodeShortPermitSig(parsedSignature);\n\n        if (\n            !EcdsaLib.isValidSignature(\n                expectedSigner,\n                _getSignedDataHash(expectedSigner, decodedSig),\n                abi.encodePacked(decodedSig.r, decodedSig.s, uint8(decodedSig.v))\n            )\n        ) {\n            return false;\n        }\n\n        if (!MerkleProof.verify(decodedSig.proof, decodedSig.superTxHash, dataHash)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function _decodeFullPermitSig(bytes calldata parsedSignature)\n        private\n        pure\n        returns (DecodedErc20PermitSig calldata decodedSig)\n    {\n        assembly {\n            decodedSig := add(parsedSignature.offset, 0x20)\n        }\n    }\n\n    function _decodeShortPermitSig(bytes calldata parsedSignature)\n        private\n        pure\n        returns (DecodedErc20PermitSigShort calldata)\n    {\n        DecodedErc20PermitSigShort calldata decodedSig;\n        assembly {\n            decodedSig := add(parsedSignature.offset, 0x20)\n        }\n        return decodedSig;\n    }\n\n    function _getSignedDataHash(address expectedSigner, DecodedErc20PermitSig memory decodedSig)\n        private\n        pure\n        returns (bytes32)\n    {\n        uint256 deadline = uint256(decodedSig.superTxHash);\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH, expectedSigner, decodedSig.spender, decodedSig.amount, decodedSig.nonce, deadline\n            )\n        );\n        return _hashTypedData(structHash, decodedSig.domainSeparator);\n    }\n\n    function _getSignedDataHash(address expectedSigner, DecodedErc20PermitSigShort memory decodedSig)\n        private\n        pure\n        returns (bytes32)\n    {\n        uint256 deadline = uint256(decodedSig.superTxHash);\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH, expectedSigner, decodedSig.spender, decodedSig.amount, decodedSig.nonce, deadline\n            )\n        );\n        return _hashTypedData(structHash, decodedSig.domainSeparator);\n    }\n\n    function _hashTypedData(bytes32 structHash, bytes32 domainSeparator) private pure returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(domainSeparator, structHash);\n    }\n}\n"},"contracts/lib/fusion/TxValidatorLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {MerkleProof} from \"openzeppelin/utils/cryptography/MerkleProof.sol\";\nimport {RLPReader as RLPDecoder} from \"rlp-reader/RLPReader.sol\";\nimport {RLPEncoder} from \"../rlp/RLPEncoder.sol\";\nimport {MEEUserOpHashLib} from \"../util/MEEUserOpHashLib.sol\";\nimport {EcdsaLib} from \"../util/EcdsaLib.sol\";\nimport {BytesLib} from \"byteslib/BytesLib.sol\";\nimport \"account-abstraction/core/Helpers.sol\";\n\n/**\n * @dev Library to validate the signature for MEE on-chain Txn mode\n *      This is the mode where superTx hash is appended to a regular txn (legacy or 1559) calldata\n *      Type 1 (EIP-2930) transactions are not supported.\n *      The whole txn is signed along with the superTx hash\n *      Txn is executed prior to a superTx, so it can pass some funds from the EOA to the smart account\n *      For more details see Fusion docs:\n *      - https://ethresear.ch/t/fusion-module-7702-alternative-with-no-protocol-changes/20949\n *      - https://docs.biconomy.io/explained/eoa#fusion-module\n *      @dev Some smart contracts may not be able to consume the txn with bytes32 appended to the calldata.\n *           However this is very small subset. One of the cases when it can happen is when the smart contract\n *           is has separate receive() and fallback() functions. Then if a txn is a value transfer, it will\n *           be expected to be consumed by the receive() function. However, if there's bytes32 appended to the calldata,\n *           it will be consumed by the fallback() function which may not be expected. In this case, the provided\n *           contracts/forwarder/Forwarder.sol can be used to 'clear' the bytes32 from the calldata.\n *      @dev In theory, the last 32 bytes of calldata from any transaction by the EOA can be interpreted as\n *           a superTx hash. Even if it was not assumed. This introduces the potential risk of phishing attacks\n *           where the user may unknowingly sign a transaction where the last 32 bytes of the calldata end up\n *           being a superTx hash. However, it is not easy to craft a txn that makes sense for a user and allows\n *           arbitrary bytes32 as last 32 bytes. Thus, wallets and users should be aware of this potential risk\n *           and should not sign txns where the last 32 bytes of the calldata do not belong to the function arguments\n *           and are just appended at the end.\n */\nlibrary TxValidatorLib {\n    uint8 constant LEGACY_TX_TYPE = 0x00;\n    uint8 constant EIP1559_TX_TYPE = 0x02;\n\n    uint8 constant EIP_155_MIN_V_VALUE = 37;\n    uint8 constant HASH_BYTE_SIZE = 32;\n\n    uint8 constant TIMESTAMP_BYTE_SIZE = 6;\n    uint8 constant PROOF_ITEM_BYTE_SIZE = 32;\n    uint8 constant ITX_HASH_BYTE_SIZE = 32;\n\n    using RLPDecoder for RLPDecoder.RLPItem;\n    using RLPDecoder for bytes;\n    using RLPEncoder for uint256;\n    using BytesLib for bytes;\n\n    struct TxData {\n        uint8 txType;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        bytes32 utxHash;\n        bytes32 superTxHash;\n        bytes32[] proof;\n        uint48 lowerBoundTimestamp;\n        uint48 upperBoundTimestamp;\n    }\n\n    // To save a bit of gas, not pass timestamps where not needed\n    struct TxDataShort {\n        uint8 txType;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        bytes32 utxHash;\n        bytes32 superTxHash;\n        bytes32[] proof;\n    }\n\n    struct TxParams {\n        uint256 v;\n        bytes32 r;\n        bytes32 s;\n        bytes callData;\n    }\n\n    /**\n     * This function parses the given userOpSignature into a valid fully signed EVM transaction.\n     * Once parsed, the function will check for three conditions:\n     *      1. is the userOp part of the superTX merkle tree\n     *      2. is the recovered tx signer equal to the expected signer?\n     *      3. is the given UserOp a part of the merkle tree\n     *\n     * If all the conditions are met - outside contract can be sure that the expected signer has indeed\n     * approved the given hash by performing given on-chain transaction.\n     *\n     * NOTES: This function will revert if either of following is met:\n     *    1. the userOpSignature couldn't be parsed to a valid fully signed EVM transaction\n     *    2. hash couldn't be extracted from the tx.data\n     *    3. extracted hash wasn't equal to the provided expected hash\n     *    4. recovered signer wasn't equal to the expected signer\n     *\n     * @param userOpHash UserOp hash being validated.\n     * @param parsedSignature Signature provided as the userOp.signature parameter (minus the prepended tx type byte).\n     *                        Expecting to receive fully signed serialized EVM transaction here of type 0x00 (LEGACY)\n     *                        or 0x02 (EIP1556).\n     *                        For LEGACY tx type the \"0x00\" prefix has to be added manually while the EIP1559 tx type\n     *                        already contains 0x02 prefix.\n     * @param expectedSigner Expected EOA signer of the given EVM transaction => superTX.\n     */\n    function validateUserOp(bytes32 userOpHash, bytes calldata parsedSignature, address expectedSigner)\n        internal\n        view\n        returns (uint256)\n    {\n        TxData memory decodedTx = decodeTx(parsedSignature);\n\n        bytes32 meeUserOpHash =\n            MEEUserOpHashLib.getMEEUserOpHash(userOpHash, decodedTx.lowerBoundTimestamp, decodedTx.upperBoundTimestamp);\n\n        bytes memory signature = abi.encodePacked(decodedTx.r, decodedTx.s, decodedTx.v);\n        if (!EcdsaLib.isValidSignature(expectedSigner, decodedTx.utxHash, signature)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        if (!MerkleProof.verify(decodedTx.proof, decodedTx.superTxHash, meeUserOpHash)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        return _packValidationData(false, decodedTx.upperBoundTimestamp, decodedTx.lowerBoundTimestamp);\n    }\n\n    /**\n     * @dev validate the signature for the owner of the superTx\n     *      used fot the 1271 flow and for the stateless validators (erc7579 module type 7)\n     * @param expectedSigner the expected signer of the superTx\n     * @param dataHash the hash of the data to be signed\n     * @param parsedSignature the signature to be validated\n     * @return true if the signature is valid, false otherwise\n     */\n    function validateSignatureForOwner(address expectedSigner, bytes32 dataHash, bytes calldata parsedSignature)\n        internal\n        view\n        returns (bool)\n    {\n        TxDataShort memory decodedTx = decodeTxShort(parsedSignature);\n\n        bytes memory signature = abi.encodePacked(decodedTx.r, decodedTx.s, decodedTx.v);\n\n        if (!EcdsaLib.isValidSignature(expectedSigner, decodedTx.utxHash, signature)) {\n            return false;\n        }\n\n        if (!MerkleProof.verify(decodedTx.proof, decodedTx.superTxHash, dataHash)) {\n            return false;\n        }\n        return true;\n    }\n\n    function decodeTx(bytes calldata self) internal pure returns (TxData memory) {\n        uint8 txType = uint8(self[0]); //first byte is tx type\n        uint48 lowerBoundTimestamp =\n            uint48(bytes6((self[self.length - 2 * TIMESTAMP_BYTE_SIZE:self.length - TIMESTAMP_BYTE_SIZE])));\n        uint48 upperBoundTimestamp = uint48(bytes6(self[self.length - TIMESTAMP_BYTE_SIZE:]));\n        uint8 proofItemsCount = uint8(self[self.length - 2 * TIMESTAMP_BYTE_SIZE - 1]);\n        uint256 appendedDataLen = (uint256(proofItemsCount) * PROOF_ITEM_BYTE_SIZE + 1) + 2 * TIMESTAMP_BYTE_SIZE;\n        bytes calldata rlpEncodedTx = self[1:self.length - appendedDataLen];\n        RLPDecoder.RLPItem memory parsedRlpEncodedTx = rlpEncodedTx.toRlpItem();\n        RLPDecoder.RLPItem[] memory parsedRlpEncodedTxItems = parsedRlpEncodedTx.toList();\n        TxParams memory params = extractParams(txType, parsedRlpEncodedTxItems);\n\n        return TxData({\n            txType: txType,\n            v: _adjustV(params.v),\n            r: params.r,\n            s: params.s,\n            utxHash: calculateUnsignedTxHash(txType, rlpEncodedTx, parsedRlpEncodedTx.payloadLen(), params.v, params.r, params.s),\n            superTxHash: extractAppendedHash(params.callData),\n            proof: extractProof(self, proofItemsCount),\n            lowerBoundTimestamp: lowerBoundTimestamp,\n            upperBoundTimestamp: upperBoundTimestamp\n        });\n    }\n\n    function decodeTxShort(bytes calldata self) internal pure returns (TxDataShort memory) {\n        uint8 txType = uint8(self[0]); //first byte is tx type\n        uint8 proofItemsCount = uint8(self[self.length - 1]);\n        uint256 appendedDataLen = (uint256(proofItemsCount) * PROOF_ITEM_BYTE_SIZE + 1);\n        bytes calldata rlpEncodedTx = self[1:self.length - appendedDataLen];\n        RLPDecoder.RLPItem memory parsedRlpEncodedTx = rlpEncodedTx.toRlpItem();\n        RLPDecoder.RLPItem[] memory parsedRlpEncodedTxItems = parsedRlpEncodedTx.toList();\n        TxParams memory params = extractParams(txType, parsedRlpEncodedTxItems);\n\n        return TxDataShort({\n            txType: txType,\n            v: _adjustV(params.v),\n            r: params.r,\n            s: params.s,\n            utxHash: calculateUnsignedTxHash(txType, rlpEncodedTx, parsedRlpEncodedTx.payloadLen(), params.v, params.r, params.s),\n            superTxHash: extractAppendedHash(params.callData),\n            proof: extractProofShort(self, proofItemsCount)\n        });\n    }\n\n    function extractParams(uint8 txType, RLPDecoder.RLPItem[] memory items)\n        private\n        pure\n        returns (TxParams memory params)\n    {\n        uint8 dataPos;\n        uint8 vPos;\n        uint8 rPos;\n        uint8 sPos;\n\n        if (txType == LEGACY_TX_TYPE) {\n            dataPos = 5;\n            vPos = 6;\n            rPos = 7;\n            sPos = 8;\n        } else if (txType == EIP1559_TX_TYPE) {\n            dataPos = 7;\n            vPos = 9;\n            rPos = 10;\n            sPos = 11;\n        } else {\n            revert(\"TxValidatorLib:: unsupported evm tx type\");\n        }\n\n        return TxParams(\n            items[vPos].toUint(), bytes32(items[rPos].toUint()), bytes32(items[sPos].toUint()), items[dataPos].toBytes()\n        );\n    }\n\n    function extractAppendedHash(bytes memory callData) private pure returns (bytes32 iTxHash) {\n        if (callData.length < ITX_HASH_BYTE_SIZE) revert(\"TxDecoder:: callData length too short\");\n        iTxHash = bytes32(callData.slice(callData.length - ITX_HASH_BYTE_SIZE, ITX_HASH_BYTE_SIZE));\n    }\n\n    function extractProof(bytes calldata signedTx, uint8 proofItemsCount)\n        private\n        pure\n        returns (bytes32[] memory proof)\n    {\n        proof = new bytes32[](proofItemsCount);\n        uint256 pos = signedTx.length - 2 * TIMESTAMP_BYTE_SIZE - 1;\n        for (proofItemsCount; proofItemsCount > 0; proofItemsCount--) {\n            proof[proofItemsCount - 1] = bytes32(signedTx[pos - PROOF_ITEM_BYTE_SIZE:pos]);\n            pos = pos - PROOF_ITEM_BYTE_SIZE;\n        }\n    }\n\n    function extractProofShort(bytes calldata signedTx, uint8 proofItemsCount)\n        private\n        pure\n        returns (bytes32[] memory proof)\n    {\n        proof = new bytes32[](proofItemsCount);\n        uint256 pos = signedTx.length - 1;\n        for (proofItemsCount; proofItemsCount > 0; proofItemsCount--) {\n            proof[proofItemsCount - 1] = bytes32(signedTx[pos - PROOF_ITEM_BYTE_SIZE:pos]);\n            pos = pos - PROOF_ITEM_BYTE_SIZE;\n        }\n    }\n\n    function calculateUnsignedTxHash(\n        uint8 txType,\n        bytes memory rlpEncodedTx,\n        uint256 rlpEncodedTxPayloadLen,\n        uint256 v,\n        bytes32 r,\n        bytes32 s\n    ) private pure returns (bytes32 hash) {\n        uint256 totalSignatureSize =\n            uint256(r).encodeUint().length + uint256(s).encodeUint().length + v.encodeUint().length;\n        uint256 totalPrefixSize = rlpEncodedTx.length - rlpEncodedTxPayloadLen;\n        bytes memory rlpEncodedTxNoSigAndPrefix =\n            rlpEncodedTx.slice(totalPrefixSize, rlpEncodedTx.length - totalSignatureSize - totalPrefixSize);\n        if (txType == EIP1559_TX_TYPE) {\n            return keccak256(abi.encodePacked(txType, prependRlpContentSize(rlpEncodedTxNoSigAndPrefix, \"\")));\n        } else if (txType == LEGACY_TX_TYPE) {\n            if (v >= EIP_155_MIN_V_VALUE) {\n                return keccak256(\n                    prependRlpContentSize(\n                        rlpEncodedTxNoSigAndPrefix,\n                        abi.encodePacked(\n                            uint256(_extractChainIdFromV(v)).encodeUint(),\n                            uint256(0).encodeUint(),\n                            uint256(0).encodeUint()\n                        )\n                    )\n                );\n            } else {\n                return keccak256(prependRlpContentSize(rlpEncodedTxNoSigAndPrefix, \"\"));\n            }\n        } else {\n            revert(\"TxValidatorLib:: unsupported tx type\");\n        }\n    }\n\n    function prependRlpContentSize(bytes memory content, bytes memory extraData) public pure returns (bytes memory) {\n        bytes memory combinedContent = abi.encodePacked(content, extraData);\n        return abi.encodePacked(combinedContent.length.encodeLength(RLPDecoder.LIST_SHORT_START), combinedContent);\n    }\n\n    function _adjustV(uint256 v) internal pure returns (uint8) {\n        if (v >= EIP_155_MIN_V_VALUE) {\n            return uint8((v - 2 * _extractChainIdFromV(v) - 35) + 27);\n        } else if (v <= 1) {\n            return uint8(v + 27);\n        } else {\n            return uint8(v);\n        }\n    }\n\n    function _extractChainIdFromV(uint256 v) internal pure returns (uint256 chainId) {\n        chainId = (v - 35) / 2;\n    }\n}\n"},"contracts/lib/fusion/SimpleValidatorLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {MerkleProof} from \"openzeppelin/utils/cryptography/MerkleProof.sol\";\nimport {EcdsaLib} from \"../util/EcdsaLib.sol\";\nimport {MEEUserOpHashLib} from \"../util/MEEUserOpHashLib.sol\";\nimport \"account-abstraction/core/Helpers.sol\";\n\n/**\n * @dev Library to validate the signature for MEE Simple mode\n *      In this mode, Fusion is not involved and just the superTx hash is signed\n */\nlibrary SimpleValidatorLib {\n    /**\n     * This function parses the given userOpSignature into a Supertransaction signature\n     *\n     * Once parsed, the function will check for two conditions:\n     *      1. is the root supertransaction hash signed by the account owner's EOA\n     *      2. is the userOp actually a part of the given supertransaction\n     *      by checking the leaf based on this userOpHash is a part of the merkle tree represented by root hash = superTxHash\n     *\n     * If both conditions are met - outside contract can be sure that the expected signer has indeed\n     * approved the given userOp - and the userOp is successfully validate.\n     *\n     * @param userOpHash UserOp hash being validated.\n     * @param signatureData Signature provided as the userOp.signature parameter (minus the prepended tx type byte).\n     * @param expectedSigner Signer expected to be recovered when decoding the ERC20OPermit signature.\n     */\n    function validateUserOp(bytes32 userOpHash, bytes calldata signatureData, address expectedSigner)\n        internal\n        view\n        returns (uint256)\n    {\n        bytes32 superTxHash;\n        uint48 lowerBoundTimestamp;\n        uint48 upperBoundTimestamp;\n        bytes32[] calldata proof;\n        bytes calldata secp256k1Signature;\n\n        assembly {\n            superTxHash := calldataload(signatureData.offset)\n            lowerBoundTimestamp := calldataload(add(signatureData.offset, 0x20))\n            upperBoundTimestamp := calldataload(add(signatureData.offset, 0x40))\n            let u := calldataload(add(signatureData.offset, 0x60))\n            let s := add(signatureData.offset, u)\n            proof.offset := add(s, 0x20)\n            proof.length := calldataload(s)\n            u := mul(proof.length, 0x20)\n            s := add(proof.offset, u)\n            secp256k1Signature.offset := add(s, 0x20)\n            secp256k1Signature.length := calldataload(s)\n        }\n\n        bytes32 leaf = MEEUserOpHashLib.getMEEUserOpHash(userOpHash, lowerBoundTimestamp, upperBoundTimestamp);\n        if (!EcdsaLib.isValidSignature(expectedSigner, superTxHash, secp256k1Signature)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        if (!MerkleProof.verify(proof, superTxHash, leaf)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        return _packValidationData(false, upperBoundTimestamp, lowerBoundTimestamp);\n    }\n\n    /**\n     * @notice Validates the signature against the expected signer (owner)\n     * @param owner Signer expected to be recovered\n     * @param dataHash data hash being validated.\n     * @param signatureData Signature\n     */\n    function validateSignatureForOwner(address owner, bytes32 dataHash, bytes calldata signatureData)\n        internal\n        view\n        returns (bool)\n    {\n        bytes32 superTxHash;\n        bytes32[] calldata proof;\n        bytes calldata secp256k1Signature;\n\n        assembly {\n            superTxHash := calldataload(signatureData.offset)\n            let u := calldataload(add(signatureData.offset, 0x20))\n            let s := add(signatureData.offset, u)\n            proof.offset := add(s, 0x20)\n            proof.length := calldataload(s)\n            u := mul(proof.length, 0x20)\n            s := add(proof.offset, u)\n            secp256k1Signature.offset := add(s, 0x20)\n            secp256k1Signature.length := calldataload(s)\n        }\n\n        if (!EcdsaLib.isValidSignature(owner, superTxHash, secp256k1Signature)) {\n            return false;\n        }\n\n        if (!MerkleProof.verify(proof, superTxHash, dataHash)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"},"contracts/lib/fusion/NoMeeFlowLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport \"account-abstraction/core/Helpers.sol\";\nimport \"../util/EcdsaLib.sol\";\n\nlibrary NoMeeFlowLib {\n    /**\n     * Standard userOp validator - validates by simply checking if the userOpHash was signed by the account's EOA owner.\n     *\n     * @param userOpHash userOpHash being validated.\n     * @param parsedSignature Signature\n     * @param expectedSigner Signer expected to be recovered\n     */\n    function validateUserOp(bytes32 userOpHash, bytes memory parsedSignature, address expectedSigner)\n        internal\n        view\n        returns (uint256)\n    {\n        if (!EcdsaLib.isValidSignature(expectedSigner, userOpHash, parsedSignature)) {\n            return SIG_VALIDATION_FAILED;\n        }\n        return SIG_VALIDATION_SUCCESS;\n    }\n\n    /**\n     * @notice Validates the signature against the expected signer (owner)\n     * @param expectedSigner Signer expected to be recovered\n     * @param hash Hash of the userOp\n     * @param parsedSignature Signature\n     */\n    function validateSignatureForOwner(address expectedSigner, bytes32 hash, bytes memory parsedSignature)\n        internal\n        view\n        returns (bool)\n    {\n        return EcdsaLib.isValidSignature(expectedSigner, hash, parsedSignature);\n    }\n}\n"},"contracts/lib/util/EcdsaLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {ECDSA} from \"solady/utils/ECDSA.sol\";\n\nlibrary EcdsaLib {\n    using ECDSA for bytes32;\n\n    /**\n     * @dev Solady ECDSA does not revert on incorrect signatures.\n     *      Instead, it returns address(0) as the recovered address.\n     *      Make sure to never pass address(0) as expectedSigner to this function.\n     */\n    function isValidSignature(address expectedSigner, bytes32 hash, bytes memory signature)\n        internal\n        view\n        returns (bool)\n    {\n        if (hash.tryRecover(signature) == expectedSigner) return true;\n        if (hash.toEthSignedMessageHash().tryRecover(signature) == expectedSigner) return true;\n        return false;\n    }\n}\n"},"node_modules/enumerablemap4337/src/AssociatedArrayLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * Dynamic arrays associated with an account address as per ERC-7562/ERC-4337\n * @author filio.eth (Biconomy), zeroknots.eth (rhinestone)\n */\nlibrary AssociatedArrayLib {\n    using AssociatedArrayLib for *;\n\n    error AssociatedArray_OutOfBounds(uint256 index);\n\n    struct Array {\n        uint256 _spacer;\n    }\n\n    function _slot(Array storage s, address account) private pure returns (bytes32 __slot) {\n        assembly {\n            mstore(0x00, account)\n            mstore(0x20, s.slot)\n            __slot := keccak256(0x00, 0x40)\n        }\n    }\n\n    function _length(Array storage s, address account) private view returns (uint256 __length) {\n        bytes32 slot = _slot(s, account);\n        assembly {\n            __length := sload(slot)\n        }\n    }\n\n    function _get(Array storage s, address account, uint256 index) private view returns (bytes32 value) {\n        return _get(_slot(s, account), index);\n    }\n\n    function _get(bytes32 slot, uint256 index) private view returns (bytes32 value) {\n        assembly {\n            //if (index >= _length(s, account)) revert AssociatedArray_OutOfBounds(index);\n            if iszero(lt(index, sload(slot))) {\n                mstore(0, 0x8277484f) // `AssociatedArray_OutOfBounds(uint256)`\n                mstore(0x20, index)\n                revert(0x1c, 0x24)\n            }\n            value := sload(add(slot, mul(0x20, add(index, 1))))\n        }\n    }\n\n    function _getAll(Array storage s, address account) private view returns (bytes32[] memory values) {\n        bytes32 slot = _slot(s, account);\n        uint256 __length;\n        assembly {\n            __length := sload(slot)\n        }\n        values = new bytes32[](__length);\n        for (uint256 i; i < __length; i++) {\n            values[i] = _get(slot, i);\n        }\n    }\n\n    // inefficient. complexity = O(n)\n    // use with caution\n    // in case of large arrays, consider using EnumerableSet4337 instead\n    function _contains(Array storage s, address account, bytes32 value) private view returns (bool) {\n        bytes32 slot = _slot(s, account);\n        uint256 __length;\n        assembly {\n            __length := sload(slot)\n        }\n        for (uint256 i; i < __length; i++) {\n            if (_get(slot, i) == value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _set(Array storage s, address account, uint256 index, bytes32 value) private {\n        _set(_slot(s, account), index, value);\n    }\n\n    function _set(bytes32 slot, uint256 index, bytes32 value) private {\n        assembly {\n            //if (index >= _length(s, account)) revert AssociatedArray_OutOfBounds(index);\n            if iszero(lt(index, sload(slot))) {\n                mstore(0, 0x8277484f) // `AssociatedArray_OutOfBounds(uint256)`\n                mstore(0x20, index)\n                revert(0x1c, 0x24)\n            }\n            sstore(add(slot, mul(0x20, add(index, 1))), value)\n        }\n    }\n\n    function _push(Array storage s, address account, bytes32 value) private {\n        bytes32 slot = _slot(s, account);\n        assembly {\n            // load length (stored @ slot), add 1 to it => index.\n            // mul index by 0x20 and add it to orig slot to get the next free slot\n            let index := add(sload(slot), 1)\n            sstore(add(slot, mul(0x20, index)), value)\n            sstore(slot, index) //increment length by 1\n        }\n    }\n\n    function _pop(Array storage s, address account) private {\n        bytes32 slot = _slot(s, account);\n        uint256 __length;\n        assembly {\n            __length := sload(slot)\n        }\n        if (__length == 0) return;\n        _set(slot, __length - 1, 0);\n        assembly {\n            sstore(slot, sub(__length, 1))\n        }\n    }\n\n    function _remove(Array storage s, address account, uint256 index) private {\n        bytes32 slot = _slot(s, account);\n        uint256 __length;\n        assembly {\n            __length := sload(slot)\n            if iszero(lt(index, __length)) {\n                mstore(0, 0x8277484f) // `AssociatedArray_OutOfBounds(uint256)`\n                mstore(0x20, index)\n                revert(0x1c, 0x24)\n            }\n        }\n        _set(slot, index, _get(s, account, __length - 1));\n\n        assembly {\n            // clear the last slot\n            // this is the 'unchecked' version of _set(slot, __length - 1, 0)\n            // as we use length-1 as index, so the check is excessive.\n            // also removes extra -1 and +1 operations\n            sstore(add(slot, mul(0x20, __length)), 0)\n            // store new length\n            sstore(slot, sub(__length, 1))\n        }\n    }\n\n    struct Bytes32Array {\n        Array _inner;\n    }\n\n    function length(Bytes32Array storage s, address account) internal view returns (uint256) {\n        return _length(s._inner, account);\n    }\n\n    function get(Bytes32Array storage s, address account, uint256 index) internal view returns (bytes32) {\n        return _get(s._inner, account, index);\n    }\n\n    function getAll(Bytes32Array storage s, address account) internal view returns (bytes32[] memory) {\n        return _getAll(s._inner, account);\n    }\n\n    function contains(Bytes32Array storage s, address account, bytes32 value) internal view returns (bool) {\n        return _contains(s._inner, account, value);\n    }\n\n    function add(Bytes32Array storage s, address account, bytes32 value) internal {\n        if (!_contains(s._inner, account, value)) {\n            _push(s._inner, account, value);\n        }\n    }\n\n    function set(Bytes32Array storage s, address account, uint256 index, bytes32 value) internal {\n        _set(s._inner, account, index, value);\n    }\n\n    function push(Bytes32Array storage s, address account, bytes32 value) internal {\n        _push(s._inner, account, value);\n    }\n\n    function pop(Bytes32Array storage s, address account) internal {\n        _pop(s._inner, account);\n    }\n\n    function remove(Bytes32Array storage s, address account, uint256 index) internal {\n        _remove(s._inner, account, index);\n    }\n\n    struct AddressArray {\n        Array _inner;\n    }\n\n    function length(AddressArray storage s, address account) internal view returns (uint256) {\n        return _length(s._inner, account);\n    }\n\n    function get(AddressArray storage s, address account, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_get(s._inner, account, index))));\n    }\n\n    function getAll(AddressArray storage s, address account) internal view returns (address[] memory) {\n        bytes32[] memory bytes32Array = _getAll(s._inner, account);\n        address[] memory addressArray;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            addressArray := bytes32Array\n        }\n        return addressArray;\n    }\n\n    function contains(AddressArray storage s, address account, address value) internal view returns (bool) {\n        return _contains(s._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    function add(AddressArray storage s, address account, address value) internal {\n        if (!_contains(s._inner, account, bytes32(uint256(uint160(value))))) {\n            _push(s._inner, account, bytes32(uint256(uint160(value))));\n        }\n    }\n\n    function set(AddressArray storage s, address account, uint256 index, address value) internal {\n        _set(s._inner, account, index, bytes32(uint256(uint160(value))));\n    }\n\n    function push(AddressArray storage s, address account, address value) internal {\n        _push(s._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    function pop(AddressArray storage s, address account) internal {\n        _pop(s._inner, account);\n    }\n\n    function remove(AddressArray storage s, address account, uint256 index) internal {\n        _remove(s._inner, account, index);\n    }\n\n    struct UintArray {\n        Array _inner;\n    }\n\n    function length(UintArray storage s, address account) internal view returns (uint256) {\n        return _length(s._inner, account);\n    }\n\n    function get(UintArray storage s, address account, uint256 index) internal view returns (uint256) {\n        return uint256(_get(s._inner, account, index));\n    }\n\n    function getAll(UintArray storage s, address account) internal view returns (uint256[] memory) {\n        bytes32[] memory bytes32Array = _getAll(s._inner, account);\n        uint256[] memory uintArray;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            uintArray := bytes32Array\n        }\n        return uintArray;\n    }\n\n    function contains(UintArray storage s, address account, uint256 value) internal view returns (bool) {\n        return _contains(s._inner, account, bytes32(value));\n    }\n\n    function add(UintArray storage s, address account, uint256 value) internal {\n        if (!_contains(s._inner, account, bytes32(value))) {\n            _push(s._inner, account, bytes32(value));\n        }\n    }\n\n    function set(UintArray storage s, address account, uint256 index, uint256 value) internal {\n        _set(s._inner, account, index, bytes32(value));\n    }\n\n    function push(UintArray storage s, address account, uint256 value) internal {\n        _push(s._inner, account, bytes32(value));\n    }\n\n    function pop(UintArray storage s, address account) internal {\n        _pop(s._inner, account);\n    }\n\n    function remove(UintArray storage s, address account, uint256 index) internal {\n        _remove(s._inner, account, index);\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Sorts the pair (a, b) and hashes the result.\n     */\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"contracts/lib/util/MEEUserOpHashLib.sol":{"content":"// SPDX-License-Identifier: Unlicense\n/*\n * @title MEE UserOp Hash Lib\n *\n * @dev Calculates userOp hash for the new type of transaction - SuperTransaction (as a part of MEE stack)\n */\npragma solidity ^0.8.27;\n\nlibrary MEEUserOpHashLib {\n    /**\n     * Calculates userOp hash. Almost works like a regular 4337 userOp hash with few fields added.\n     *\n     * @param userOpHash userOp hash to calculate the hash for\n     * @param lowerBoundTimestamp lower bound timestamp set when constructing userOp\n     * @param upperBoundTimestamp upper bound timestamp set when constructing userOp\n     * Timestamps are used by the MEE node to schedule the execution of the userOps within the superTx\n     */\n    function getMEEUserOpHash(bytes32 userOpHash, uint256 lowerBoundTimestamp, uint256 upperBoundTimestamp)\n        internal\n        pure\n        returns (bytes32 meeUserOpHash)\n    {\n        meeUserOpHash =\n            keccak256(bytes.concat(keccak256(abi.encode(userOpHash, lowerBoundTimestamp, upperBoundTimestamp))));\n    }\n}\n"},"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"node_modules/account-abstraction/contracts/core/Helpers.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.23;\n\n/* solhint-disable no-inline-assembly */\n\n\n /*\n  * For simulation purposes, validateUserOp (and validatePaymasterUserOp)\n  * must return this value in case of signature failure, instead of revert.\n  */\nuint256 constant SIG_VALIDATION_FAILED = 1;\n\n\n/*\n * For simulation purposes, validateUserOp (and validatePaymasterUserOp)\n * return this value on success.\n */\nuint256 constant SIG_VALIDATION_SUCCESS = 0;\n\n\n/**\n * Returned data from validateUserOp.\n * validateUserOp returns a uint256, which is created by `_packedValidationData` and\n * parsed by `_parseValidationData`.\n * @param aggregator  - address(0) - The account validated the signature by itself.\n *                      address(1) - The account failed to validate the signature.\n *                      otherwise - This is an address of a signature aggregator that must\n *                                  be used to validate the signature.\n * @param validAfter  - This UserOp is valid only after this timestamp.\n * @param validaUntil - This UserOp is valid only up to this timestamp.\n */\nstruct ValidationData {\n    address aggregator;\n    uint48 validAfter;\n    uint48 validUntil;\n}\n\n/**\n * Extract sigFailed, validAfter, validUntil.\n * Also convert zero validUntil to type(uint48).max.\n * @param validationData - The packed validation data.\n */\nfunction _parseValidationData(\n    uint256 validationData\n) pure returns (ValidationData memory data) {\n    address aggregator = address(uint160(validationData));\n    uint48 validUntil = uint48(validationData >> 160);\n    if (validUntil == 0) {\n        validUntil = type(uint48).max;\n    }\n    uint48 validAfter = uint48(validationData >> (48 + 160));\n    return ValidationData(aggregator, validAfter, validUntil);\n}\n\n/**\n * Helper to pack the return value for validateUserOp.\n * @param data - The ValidationData to pack.\n */\nfunction _packValidationData(\n    ValidationData memory data\n) pure returns (uint256) {\n    return\n        uint160(data.aggregator) |\n        (uint256(data.validUntil) << 160) |\n        (uint256(data.validAfter) << (160 + 48));\n}\n\n/**\n * Helper to pack the return value for validateUserOp, when not using an aggregator.\n * @param sigFailed  - True for signature failure, false for success.\n * @param validUntil - Last timestamp this UserOperation is valid (or zero for infinite).\n * @param validAfter - First timestamp this UserOperation is valid.\n */\nfunction _packValidationData(\n    bool sigFailed,\n    uint48 validUntil,\n    uint48 validAfter\n) pure returns (uint256) {\n    return\n        (sigFailed ? 1 : 0) |\n        (uint256(validUntil) << 160) |\n        (uint256(validAfter) << (160 + 48));\n}\n\n/**\n * keccak function over calldata.\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\n */\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\n        assembly (\"memory-safe\") {\n            let mem := mload(0x40)\n            let len := data.length\n            calldatacopy(mem, data.offset, len)\n            ret := keccak256(mem, len)\n        }\n    }\n\n\n/**\n * The minimum of two numbers.\n * @param a - First number.\n * @param b - Second number.\n */\n    function min(uint256 a, uint256 b) pure returns (uint256) {\n        return a < b ? a : b;\n    }\n"},"node_modules/Solidity-RLP/contracts/RLPReader.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        require(memPtr - item.memPtr == item.len);\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"},"contracts/lib/rlp/RLPEncoder.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.27;\n\n// Had to keep it copypasted as the og lib https://github.com/bakaoh/solidity-rlp-encode has incompatible solc version\n\nimport \"byteslib/BytesLib.sol\";\n\n/**\n * @title RLPEncoder\n * @dev A simple RLP encoding library.\n * @author Bakaoh\n */\nlibrary RLPEncoder {\n    using BytesLib for bytes;\n\n    /*\n     * Internal functions\n     */\n\n    /**\n     * @dev RLP encodes a byte string.\n     * @param self The byte string to encode.\n     * @return The RLP encoded string in bytes.\n     */\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\n        bytes memory encoded;\n        if (self.length == 1 && uint8(self[0]) < 128) {\n            encoded = self;\n        } else {\n            encoded = encodeLength(self.length, 128).concat(self);\n        }\n        return encoded;\n    }\n\n    /**\n     * @dev RLP encodes a uint.\n     * @param self The uint to encode.\n     * @return The RLP encoded uint in bytes.\n     */\n    function encodeUint(uint256 self) internal pure returns (bytes memory) {\n        return encodeBytes(toBinary(self));\n    }\n\n    /**\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\n     * @param self The length of the string or the payload.\n     * @param offset 128 if item is string, 192 if item is list.\n     * @return RLP encoded bytes.\n     */\n    function encodeLength(uint256 self, uint256 offset) internal pure returns (bytes memory) {\n        bytes memory encoded;\n        if (self < 56) {\n            encoded = new bytes(1);\n            encoded[0] = bytes32(self + offset)[31];\n        } else {\n            uint256 lenLen;\n            uint256 i = 1;\n            while (self / i != 0) {\n                lenLen++;\n                i *= 256;\n            }\n\n            encoded = new bytes(lenLen + 1);\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\n            for (i = 1; i <= lenLen; i++) {\n                encoded[i] = bytes32((self / (256 ** (lenLen - i))) % 256)[31];\n            }\n        }\n        return encoded;\n    }\n\n    /*\n     * Private functions\n     */\n\n    /**\n     * @dev Encode integer in big endian binary form with no leading zeroes.\n     * @notice TODO: This should be optimized with assembly to save gas costs.\n     * @param _x The integer to encode.\n     * @return RLP encoded bytes.\n     */\n    function toBinary(uint256 _x) private pure returns (bytes memory) {\n        bytes memory b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), _x)\n        }\n        uint256 i;\n        for (i = 0; i < 32; i++) {\n            if (b[i] != 0) {\n                break;\n            }\n        }\n        bytes memory res = new bytes(32 - i);\n        for (uint256 j = 0; j < res.length; j++) {\n            res[j] = b[i++];\n        }\n        return res;\n    }\n}\n"},"node_modules/solidity-bytes-utils/contracts/BytesLib.sol":{"content":"// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"},"node_modules/solady/src/utils/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Gas optimized ECDSA wrapper.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ECDSA.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol)\n///\n/// @dev Note:\n/// - The recovery functions use the ecrecover precompile (0x1).\n/// - As of Solady version 0.0.68, the `recover` variants will revert upon recovery failure.\n///   This is for more safety by default.\n///   Use the `tryRecover` variants if you need to get the zero address back\n///   upon recovery failure instead.\n/// - As of Solady version 0.0.134, all `bytes signature` variants accept both\n///   regular 65-byte `(r, s, v)` and EIP-2098 `(r, vs)` short form signatures.\n///   See: https://eips.ethereum.org/EIPS/eip-2098\n///   This is for calldata efficiency on smart accounts prevalent on L2s.\n///\n/// WARNING! Do NOT directly use signatures as unique identifiers:\n/// - The recovery operations do NOT check if a signature is non-malleable.\n/// - Use a nonce in the digest to prevent replay attacks on the same contract.\n/// - Use EIP-712 for the digest to prevent replay attacks across different chains and contracts.\n///   EIP-712 also enables readable signing of typed data for better user safety.\n/// - If you need a unique hash from a signature, please use the `canonicalHash` functions.\nlibrary ECDSA {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The order of the secp256k1 elliptic curve.\n    uint256 internal constant N = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141;\n\n    /// @dev `N/2 + 1`. Used for checking the malleability of the signature.\n    uint256 private constant _HALF_N_PLUS_1 =\n        0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                        CUSTOM ERRORS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The signature is invalid.\n    error InvalidSignature();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                    RECOVERY OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Recovers the signer's address from a message digest `hash`, and the `signature`.\n    function recover(bytes32 hash, bytes memory signature) internal view returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let m := mload(0x40) } 1 {\n                mstore(0x00, 0x8baa579f) // `InvalidSignature()`.\n                revert(0x1c, 0x04)\n            } {\n                switch mload(signature)\n                case 64 {\n                    let vs := mload(add(signature, 0x40))\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\n                }\n                case 65 {\n                    mstore(0x20, byte(0, mload(add(signature, 0x60)))) // `v`.\n                    mstore(0x60, mload(add(signature, 0x40))) // `s`.\n                }\n                default { continue }\n                mstore(0x00, hash)\n                mstore(0x40, mload(add(signature, 0x20))) // `r`.\n                result := mload(staticcall(gas(), 1, 0x00, 0x80, 0x01, 0x20))\n                mstore(0x60, 0) // Restore the zero slot.\n                mstore(0x40, m) // Restore the free memory pointer.\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                if returndatasize() { break }\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`, and the `signature`.\n    function recoverCalldata(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let m := mload(0x40) } 1 {\n                mstore(0x00, 0x8baa579f) // `InvalidSignature()`.\n                revert(0x1c, 0x04)\n            } {\n                switch signature.length\n                case 64 {\n                    let vs := calldataload(add(signature.offset, 0x20))\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\n                    mstore(0x40, calldataload(signature.offset)) // `r`.\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\n                }\n                case 65 {\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40)))) // `v`.\n                    calldatacopy(0x40, signature.offset, 0x40) // Copy `r` and `s`.\n                }\n                default { continue }\n                mstore(0x00, hash)\n                result := mload(staticcall(gas(), 1, 0x00, 0x80, 0x01, 0x20))\n                mstore(0x60, 0) // Restore the zero slot.\n                mstore(0x40, m) // Restore the free memory pointer.\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                if returndatasize() { break }\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal view returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x00, hash)\n            mstore(0x20, add(shr(255, vs), 27)) // `v`.\n            mstore(0x40, r)\n            mstore(0x60, shr(1, shl(1, vs))) // `s`.\n            result := mload(staticcall(gas(), 1, 0x00, 0x80, 0x01, 0x20))\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            if iszero(returndatasize()) {\n                mstore(0x00, 0x8baa579f) // `InvalidSignature()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x60, 0) // Restore the zero slot.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the signature defined by `v`, `r`, `s`.\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x00, hash)\n            mstore(0x20, and(v, 0xff))\n            mstore(0x40, r)\n            mstore(0x60, s)\n            result := mload(staticcall(gas(), 1, 0x00, 0x80, 0x01, 0x20))\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            if iszero(returndatasize()) {\n                mstore(0x00, 0x8baa579f) // `InvalidSignature()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x60, 0) // Restore the zero slot.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   TRY-RECOVER OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // WARNING!\n    // These functions will NOT revert upon recovery failure.\n    // Instead, they will return the zero address upon recovery failure.\n    // It is critical that the returned address is NEVER compared against\n    // a zero address (e.g. an uninitialized address variable).\n\n    /// @dev Recovers the signer's address from a message digest `hash`, and the `signature`.\n    function tryRecover(bytes32 hash, bytes memory signature)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let m := mload(0x40) } 1 {} {\n                switch mload(signature)\n                case 64 {\n                    let vs := mload(add(signature, 0x40))\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\n                }\n                case 65 {\n                    mstore(0x20, byte(0, mload(add(signature, 0x60)))) // `v`.\n                    mstore(0x60, mload(add(signature, 0x40))) // `s`.\n                }\n                default { break }\n                mstore(0x00, hash)\n                mstore(0x40, mload(add(signature, 0x20))) // `r`.\n                pop(staticcall(gas(), 1, 0x00, 0x80, 0x40, 0x20))\n                mstore(0x60, 0) // Restore the zero slot.\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                result := mload(xor(0x60, returndatasize()))\n                mstore(0x40, m) // Restore the free memory pointer.\n                break\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`, and the `signature`.\n    function tryRecoverCalldata(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let m := mload(0x40) } 1 {} {\n                switch signature.length\n                case 64 {\n                    let vs := calldataload(add(signature.offset, 0x20))\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\n                    mstore(0x40, calldataload(signature.offset)) // `r`.\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\n                }\n                case 65 {\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40)))) // `v`.\n                    calldatacopy(0x40, signature.offset, 0x40) // Copy `r` and `s`.\n                }\n                default { break }\n                mstore(0x00, hash)\n                pop(staticcall(gas(), 1, 0x00, 0x80, 0x40, 0x20))\n                mstore(0x60, 0) // Restore the zero slot.\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                result := mload(xor(0x60, returndatasize()))\n                mstore(0x40, m) // Restore the free memory pointer.\n                break\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x00, hash)\n            mstore(0x20, add(shr(255, vs), 27)) // `v`.\n            mstore(0x40, r)\n            mstore(0x60, shr(1, shl(1, vs))) // `s`.\n            pop(staticcall(gas(), 1, 0x00, 0x80, 0x40, 0x20))\n            mstore(0x60, 0) // Restore the zero slot.\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            result := mload(xor(0x60, returndatasize()))\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the signature defined by `v`, `r`, `s`.\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x00, hash)\n            mstore(0x20, and(v, 0xff))\n            mstore(0x40, r)\n            mstore(0x60, s)\n            pop(staticcall(gas(), 1, 0x00, 0x80, 0x40, 0x20))\n            mstore(0x60, 0) // Restore the zero slot.\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            result := mload(xor(0x60, returndatasize()))\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     HASHING OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`.\n    /// This produces a hash corresponding to the one signed with the\n    /// [`eth_sign`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign)\n    /// JSON-RPC method as part of EIP-191.\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x20, hash) // Store into scratch space for keccak256.\n            mstore(0x00, \"\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n32\") // 28 bytes.\n            result := keccak256(0x04, 0x3c) // `32 * 2 - (32 - 28) = 60 = 0x3c`.\n        }\n    }\n\n    /// @dev Returns an Ethereum Signed Message, created from `s`.\n    /// This produces a hash corresponding to the one signed with the\n    /// [`eth_sign`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign)\n    /// JSON-RPC method as part of EIP-191.\n    /// Note: Supports lengths of `s` up to 999999 bytes.\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let sLength := mload(s)\n            let o := 0x20\n            mstore(o, \"\\x19Ethereum Signed Message:\\n\") // 26 bytes, zero-right-padded.\n            mstore(0x00, 0x00)\n            // Convert the `s.length` to ASCII decimal representation: `base10(s.length)`.\n            for { let temp := sLength } 1 {} {\n                o := sub(o, 1)\n                mstore8(o, add(48, mod(temp, 10)))\n                temp := div(temp, 10)\n                if iszero(temp) { break }\n            }\n            let n := sub(0x3a, o) // Header length: `26 + 32 - o`.\n            // Throw an out-of-offset error (consumes all gas) if the header exceeds 32 bytes.\n            returndatacopy(returndatasize(), returndatasize(), gt(n, 0x20))\n            mstore(s, or(mload(0x00), mload(n))) // Temporarily store the header.\n            result := keccak256(add(s, sub(0x20, n)), add(n, sLength))\n            mstore(s, sLength) // Restore the length.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  CANONICAL HASH FUNCTIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // The following functions returns the hash of the signature in it's canonicalized format,\n    // which is the 65-byte `abi.encodePacked(r, s, uint8(v))`, where `v` is either 27 or 28.\n    // If `s` is greater than `N / 2` then it will be converted to `N - s`\n    // and the `v` value will be flipped.\n    // If the signature has an invalid length, or if `v` is invalid,\n    // a uniquely corrupt hash will be returned.\n    // These functions are useful for \"poor-mans-VRF\".\n\n    /// @dev Returns the canonical hash of `signature`.\n    function canonicalHash(bytes memory signature) internal pure returns (bytes32 result) {\n        // @solidity memory-safe-assembly\n        assembly {\n            let l := mload(signature)\n            for {} 1 {} {\n                mstore(0x00, mload(add(signature, 0x20))) // `r`.\n                let s := mload(add(signature, 0x40))\n                let v := mload(add(signature, 0x41))\n                if eq(l, 64) {\n                    v := add(shr(255, s), 27)\n                    s := shr(1, shl(1, s))\n                }\n                if iszero(lt(s, _HALF_N_PLUS_1)) {\n                    v := xor(v, 7)\n                    s := sub(N, s)\n                }\n                mstore(0x21, v)\n                mstore(0x20, s)\n                result := keccak256(0x00, 0x41)\n                mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n                break\n            }\n\n            // If the length is neither 64 nor 65, return a uniquely corrupted hash.\n            if iszero(lt(sub(l, 64), 2)) {\n                // `bytes4(keccak256(\"InvalidSignatureLength\"))`.\n                result := xor(keccak256(add(signature, 0x20), l), 0xd62f1ab2)\n            }\n        }\n    }\n\n    /// @dev Returns the canonical hash of `signature`.\n    function canonicalHashCalldata(bytes calldata signature)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // @solidity memory-safe-assembly\n        assembly {\n            for {} 1 {} {\n                mstore(0x00, calldataload(signature.offset)) // `r`.\n                let s := calldataload(add(signature.offset, 0x20))\n                let v := calldataload(add(signature.offset, 0x21))\n                if eq(signature.length, 64) {\n                    v := add(shr(255, s), 27)\n                    s := shr(1, shl(1, s))\n                }\n                if iszero(lt(s, _HALF_N_PLUS_1)) {\n                    v := xor(v, 7)\n                    s := sub(N, s)\n                }\n                mstore(0x21, v)\n                mstore(0x20, s)\n                result := keccak256(0x00, 0x41)\n                mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n                break\n            }\n            // If the length is neither 64 nor 65, return a uniquely corrupted hash.\n            if iszero(lt(sub(signature.length, 64), 2)) {\n                calldatacopy(mload(0x40), signature.offset, signature.length)\n                // `bytes4(keccak256(\"InvalidSignatureLength\"))`.\n                result := xor(keccak256(mload(0x40), signature.length), 0xd62f1ab2)\n            }\n        }\n    }\n\n    /// @dev Returns the canonical hash of `signature`.\n    function canonicalHash(bytes32 r, bytes32 vs) internal pure returns (bytes32 result) {\n        // @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, r) // `r`.\n            let v := add(shr(255, vs), 27)\n            let s := shr(1, shl(1, vs))\n            mstore(0x21, v)\n            mstore(0x20, s)\n            result := keccak256(0x00, 0x41)\n            mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /// @dev Returns the canonical hash of `signature`.\n    function canonicalHash(uint8 v, bytes32 r, bytes32 s) internal pure returns (bytes32 result) {\n        // @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, r) // `r`.\n            if iszero(lt(s, _HALF_N_PLUS_1)) {\n                v := xor(v, 7)\n                s := sub(N, s)\n            }\n            mstore(0x21, v)\n            mstore(0x20, s)\n            result := keccak256(0x00, 0x41)\n            mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   EMPTY CALLDATA HELPERS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns an empty calldata bytes.\n    function emptySignature() internal pure returns (bytes calldata signature) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            signature.length := 0\n        }\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"}},"settings":{"remappings":["openzeppelin/=node_modules/@openzeppelin/contracts/","account-abstraction/=node_modules/account-abstraction/contracts/","erc7739Validator/=node_modules/erc7739-validator-base/src/","solady/=node_modules/solady/src/","forge-std/=lib/forge-std/src/","erc7579/=node_modules/erc7579/src/","EnumerableSet4337/=node_modules/enumerablemap4337/src/","byteslib/=node_modules/solidity-bytes-utils/contracts/","rlp-reader/=node_modules/Solidity-RLP/contracts/","murky-trees/=node_modules/murky/src/","sentinellist/=node_modules/@rhinestone/sentinellist/src/","@ERC4337/=node_modules/@ERC4337/","@FCL/=node_modules/delegation-framework/lib/FCL/solidity/src/","@SCL/=node_modules/delegation-framework/lib/SCL/src/","@account-abstraction/=node_modules/delegation-framework/lib/account-abstraction/contracts/","@bytes-utils/=node_modules/delegation-framework/lib/solidity-bytes-utils/contracts/","@erc7579/=node_modules/@erc7579/","@gnosis.pm/=node_modules/@gnosis.pm/","@openzeppelin/=node_modules/@openzeppelin/","@prb/=node_modules/@prb/","@rhinestone/=node_modules/@rhinestone/","@safe-global/=node_modules/@safe-global/","@solidity-stringutils/=node_modules/delegation-framework/lib/solidity-stringutils/src/","@zerodev/=node_modules/@zerodev/","ExcessivelySafeCall/=node_modules/erc7739-validator-base/node_modules/excessively-safe-call/src/","account-abstraction-v0.6/=node_modules/account-abstraction-v0.6/","delegation-framework/=node_modules/delegation-framework/","ds-test/=node_modules/ds-test/","enumerablemap4337/=node_modules/enumerablemap4337/","enumerableset4337/=node_modules/erc7739-validator-base/node_modules/@erc7579/enumerablemap4337/src/","erc4337-validation/=node_modules/erc7739-validator-base/node_modules/@rhinestone/erc4337-validation/src/","erc7739-validator-base/=node_modules/erc7739-validator-base/","excessively-safe-call/=node_modules/excessively-safe-call/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/","kernel/=node_modules/erc7739-validator-base/node_modules/@zerodev/kernel/src/","module-bases/=node_modules/erc7739-validator-base/node_modules/@rhinestone/module-bases/src/","modulekit/=node_modules/erc7739-validator-base/node_modules/@rhinestone/modulekit/src/","murky/=node_modules/murky/","safe7579/=node_modules/erc7739-validator-base/node_modules/@rhinestone/safe7579/src/","solarray/=node_modules/solarray/","solidity-bytes-utils/=node_modules/solidity-bytes-utils/","solidity-rlp/=node_modules/solidity-rlp/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"useLiteralContent":false,"bytecodeHash":"none","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":true,"libraries":{}}}
