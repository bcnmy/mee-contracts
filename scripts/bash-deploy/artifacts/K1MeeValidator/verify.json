{"language":"Solidity","sources":{"contracts/validators/K1MeeValidator.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.27;\n\nimport {IValidator, MODULE_TYPE_VALIDATOR} from \"../interfaces/IERC7579Module.sol\";\nimport {ERC7739Validator} from \"erc7739Validator/ERC7739Validator.sol\";\n\n// Fusion libraries - validate userOp using on-chain tx or off-chain permit\nimport {EnumerableSet} from \"../libraries/storage/EnumerableSet4337.sol\";\nimport \"../libraries/SuperTxEcdsaValidatorLib.sol\";\n\ncontract K1MeeValidator is IValidator, ERC7739Validator {\n    // using SignatureCheckerLib for address;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                            CONSTANTS & STORAGE\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice Mapping of smart account addresses to their respective owner addresses\n    mapping(address => address) public smartAccountOwners;\n\n    EnumerableSet.AddressSet private _safeSenders;\n\n    /// @notice Error to indicate that no owner was provided during installation\n    error NoOwnerProvided();\n\n    /// @notice Error to indicate that the new owner cannot be the zero address\n    error ZeroAddressNotAllowed();\n\n    /// @notice Error to indicate the module is already initialized\n    error ModuleAlreadyInitialized();\n\n    /// @notice Error to indicate that the new owner cannot be a contract address\n    error NewOwnerIsContract();\n\n    /// @notice Error to indicate that the owner cannot be the zero address\n    error OwnerCannotBeZeroAddress();\n\n    /// @notice Error to indicate that the data length is invalid\n    error InvalidDataLength();\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONFIG\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /**\n     * Initialize the module with the given data\n     *\n     * @param data The data to initialize the module with\n     */\n    function onInstall(bytes calldata data) external override {\n        require(data.length != 0, NoOwnerProvided());\n        require(!_isInitialized(msg.sender), ModuleAlreadyInitialized());\n        address newOwner = address(bytes20(data[:20]));\n        require(newOwner != address(0), OwnerCannotBeZeroAddress());\n        require(!_isContract(newOwner), NewOwnerIsContract());\n        smartAccountOwners[msg.sender] = newOwner;\n        if (data.length > 20) {\n            _fillSafeSenders(data[20:]);\n        }\n    }\n\n    /**\n     * De-initialize the module with the given data\n     */\n    function onUninstall(bytes calldata) external override {\n        delete smartAccountOwners[msg.sender];\n        _safeSenders.removeAll(msg.sender);\n    }\n\n    /// @notice Transfers ownership of the validator to a new owner\n    /// @param newOwner The address of the new owner\n    function transferOwnership(address newOwner) external {\n        require(newOwner != address(0), ZeroAddressNotAllowed());\n        require(!_isContract(newOwner), NewOwnerIsContract());\n        smartAccountOwners[msg.sender] = newOwner;\n    }\n\n    /// @notice Adds a safe sender to the _safeSenders list for the smart account\n    function addSafeSender(address sender) external {\n        _safeSenders.add(msg.sender, sender);\n    }\n\n    /// @notice Removes a safe sender from the _safeSenders list for the smart account\n    function removeSafeSender(address sender) external {\n        _safeSenders.remove(msg.sender, sender);\n    }\n\n    /// @notice Checks if a sender is in the _safeSenders list for the smart account\n    function isSafeSender(address sender, address smartAccount) external view returns (bool) {\n        return _safeSenders.contains(smartAccount, sender);\n    }\n\n    /**\n     * Check if the module is initialized\n     * @param smartAccount The smart account to check\n     *\n     * @return true if the module is initialized, false otherwise\n     */\n    function isInitialized(address smartAccount) external view returns (bool) {\n        return _isInitialized(smartAccount);\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     MODULE LOGIC\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /**\n     * Validates PackedUserOperation\n     *\n     * @param userOp UserOperation to be validated\n     * @param userOpHash Hash of the UserOperation to be validated\n     *\n     * @return uint256 the result of the signature validation, which can be:\n     *  - 0 if the signature is valid\n     *  - 1 if the signature is invalid\n     *  - <20-byte> aggregatorOrSigFail, <6-byte> validUntil and <6-byte> validAfter (see ERC-4337\n     * for more details)\n     */\n    function validateUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash)\n        external\n        override\n        returns (uint256)\n    {\n        address owner = smartAccountOwners[userOp.sender];\n        return SuperTxEcdsaValidatorLib.validateUserOp(userOp, userOpHash, owner);\n    }\n\n    /**\n     * Validates an ERC-1271 signature\n     *\n     * @param sender The sender of the ERC-1271 call to the account\n     * @param hash The hash of the message\n     * @param signature The signature of the message\n     *\n     * @return sigValidationResult the result of the signature validation, which can be:\n     *  - EIP1271_SUCCESS if the signature is valid\n     *  - EIP1271_FAILED if the signature is invalid\n     */\n    function isValidSignatureWithSender(address sender, bytes32 hash, bytes calldata signature)\n        external\n        view\n        virtual\n        override\n        returns (bytes4 sigValidationResult)\n    {\n        return _erc1271IsValidSignatureWithSender(sender, hash, _erc1271UnwrapSignature(signature));\n    }\n\n    /// @notice ISessionValidator interface for smart session\n    /// @param hash The hash of the data to validate\n    /// @param sig The signature data\n    /// @param data The data to validate against (owner address in this case)\n    function validateSignatureWithData(bytes32 hash, bytes calldata sig, bytes calldata data)\n        external\n        pure\n        returns (bool validSig)\n    {\n        require(data.length == 20, InvalidDataLength());\n        address owner = address(bytes20(data[0:20]));\n        return _validateSignatureForOwner(owner, hash, sig);\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     METADATA\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice Returns the name of the module\n    /// @return The name of the module\n    function name() external pure returns (string memory) {\n        return \"K1MeeValidator\";\n    }\n\n    /// @notice Returns the version of the module\n    /// @return The version of the module\n    function version() external pure returns (string memory) {\n        return \"1.0.0\";\n    }\n\n    /// @notice Checks if the module is of the specified type\n    /// @param typeId The type ID to check\n    /// @return True if the module is of the specified type, false otherwise\n    function isModuleType(uint256 typeId) external pure returns (bool) {\n        return typeId == MODULE_TYPE_VALIDATOR;\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     INTERNAL\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /// @dev Returns whether the `hash` and `signature` are valid.\n    ///      Obtains the authorized signer's credentials and calls some\n    ///      module's specific internal function to validate the signature\n    ///      against credentials.\n    function _erc1271IsValidSignatureNowCalldata(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        // call custom internal function to validate the signature against credentials\n        return _validateSignatureForOwner(smartAccountOwners[msg.sender], hash, signature);\n    }\n\n    /// @dev Returns whether the `sender` is considered safe, such\n    /// that we don't need to use the nested EIP-712 workflow.\n    /// See: https://mirror.xyz/curiousapple.eth/pFqAdW2LiJ-6S4sg_u1z08k4vK6BCJ33LcyXpnNb8yU\n    // The canonical `MulticallerWithSigner` at 0x000000000000D9ECebf3C23529de49815Dac1c4c\n    // is known to include the account in the hash to be signed.\n    // msg.sender = Smart Account\n    // sender = 1271 og request sender\n    function _erc1271CallerIsSafe(address sender) internal view virtual override returns (bool) {\n        return (\n            sender == 0x000000000000D9ECebf3C23529de49815Dac1c4c // MulticallerWithSigner\n                || sender == msg.sender // Smart Account. Assume smart account never sends non safe eip-712 struct\n                || _safeSenders.contains(msg.sender, sender)\n        ); // check if sender is in _safeSenders for the Smart Account\n    }\n\n    /// @notice Internal method that does the job of validating the signature via ECDSA (secp256k1)\n    /// @param owner The address of the owner\n    /// @param hash The hash of the data to validate\n    /// @param signature The signature data\n    function _validateSignatureForOwner(address owner, bytes32 hash, bytes calldata signature)\n        internal\n        pure\n        returns (bool)\n    {\n        return SuperTxEcdsaValidatorLib.validateSignatureForOwner(owner, hash, signature);\n    }\n\n    // @notice Fills the _safeSenders list from the given data\n    function _fillSafeSenders(bytes calldata data) private {\n        for (uint256 i; i < data.length / 20; i++) {\n            _safeSenders.add(msg.sender, address(bytes20(data[20 * i:20 * (i + 1)])));\n        }\n    }\n\n    /// @notice Checks if the smart account is initialized with an owner\n    /// @param smartAccount The address of the smart account\n    /// @return True if the smart account has an owner, false otherwise\n    function _isInitialized(address smartAccount) private view returns (bool) {\n        return smartAccountOwners[smartAccount] != address(0);\n    }\n\n    /// @notice Checks if the address is a contract\n    /// @param account The address to check\n    /// @return True if the address is a contract, false otherwise\n    function _isContract(address account) private view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n}\n"},"contracts/interfaces/IERC7579Module.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {PackedUserOperation} from \"account-abstraction/interfaces/PackedUserOperation.sol\";\n\nuint256 constant VALIDATION_SUCCESS = 0;\nuint256 constant VALIDATION_FAILED = 1;\n\nuint256 constant MODULE_TYPE_VALIDATOR = 1;\nuint256 constant MODULE_TYPE_EXECUTOR = 2;\nuint256 constant MODULE_TYPE_FALLBACK = 3;\nuint256 constant MODULE_TYPE_HOOK = 4;\n\ninterface IModule {\n    error AlreadyInitialized(address smartAccount);\n    error NotInitialized(address smartAccount);\n\n    /**\n     * @dev This function is called by the smart account during installation of the module\n     * @param data arbitrary data that may be required on the module during `onInstall`\n     * initialization\n     *\n     * MUST revert on error (i.e. if module is already enabled)\n     */\n    function onInstall(bytes calldata data) external;\n\n    /**\n     * @dev This function is called by the smart account during uninstallation of the module\n     * @param data arbitrary data that may be required on the module during `onUninstall`\n     * de-initialization\n     *\n     * MUST revert on error\n     */\n    function onUninstall(bytes calldata data) external;\n\n    /**\n     * @dev Returns boolean value if module is a certain type\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\n     *\n     * MUST return true if the module is of the given type and false otherwise\n     */\n    function isModuleType(uint256 moduleTypeId) external view returns (bool);\n\n    /**\n     * @dev Returns if the module was already initialized for a provided smartaccount\n     */\n    function isInitialized(address smartAccount) external view returns (bool);\n}\n\ninterface IValidator is IModule {\n    error InvalidTargetAddress(address target);\n\n    /**\n     * @dev Validates a transaction on behalf of the account.\n     *         This function is intended to be called by the MSA during the ERC-4337 validaton phase\n     *         Note: solely relying on bytes32 hash and signature is not suffcient for some\n     * validation implementations (i.e. SessionKeys often need access to userOp.calldata)\n     * @param userOp The user operation to be validated. The userOp MUST NOT contain any metadata.\n     * The MSA MUST clean up the userOp before sending it to the validator.\n     * @param userOpHash The hash of the user operation to be validated\n     * @return return value according to ERC-4337\n     */\n    function validateUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash) external returns (uint256);\n\n    /**\n     * Validator can be used for ERC-1271 validation\n     */\n    function isValidSignatureWithSender(address sender, bytes32 hash, bytes calldata data)\n        external\n        view\n        returns (bytes4);\n}\n\ninterface IExecutor is IModule {}\n\ninterface IHook is IModule {\n    function preCheck(address msgSender, uint256 msgValue, bytes calldata msgData)\n        external\n        returns (bytes memory hookData);\n\n    function postCheck(bytes calldata hookData) external;\n}\n\ninterface IFallback is IModule {}\n"},"node_modules/erc7739-validator-base/src/ERC7739Validator.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\ninterface IERC5267 {\n    function eip712Domain() external view returns (\n        bytes1 fields,\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract,\n        bytes32 salt,\n        uint256[] memory extensions\n    );\n}\n\n/// @title ERC-7739: Nested Typed Data Sign Support for ERC-7579 Validators\nabstract contract ERC7739Validator {\n    error InvalidSignature();\n    \n    /// @dev `keccak256(\"PersonalSign(bytes prefixed)\")`.\n    bytes32 internal constant _PERSONAL_SIGN_TYPEHASH = 0x983e65e5148e570cd828ead231ee759a8d7958721a768f93bc4483ba005c32de;\n    bytes32 internal constant _DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n    bytes4 internal constant SUPPORTS_ERC7739_V1 = 0x77390001;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     INTERNAL\n    //////////////////////////////////////////////////////////////////////////*/\n\n    /// @dev Returns whether the `signature` is valid for the `hash.\n    /// Use this in your validator's `isValidSignatureWithSender` implementation.\n    function _erc1271IsValidSignatureWithSender(address sender, bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bytes4)\n    {   \n        // detection request\n        // this check only takes 17 gas units\n        // in theory, it can be moved out of this function so it doesn't apply to every\n        // isValidSignatureWithSender() call, but it would require an additional standard\n        // interface for SA to check if the IValidator supports ERC-7739\n        // while isValidSignatureWithSender() is specified by ERC-7579, so\n        // it makes sense to use it in SA to check if the validator supports ERC-7739\n        unchecked {\n            if (signature.length == uint256(0)) {\n                // Forces the compiler to optimize for smaller bytecode size.\n                if (uint256(hash) == ~signature.length / 0xffff * 0x7739) \n                    return SUPPORTS_ERC7739_V1;\n            }\n        }\n\n        // sig malleability prevention\n        bytes32 s;\n        assembly {\n            // same as `s := mload(add(signature, 0x40))` but for calldata\n            s := calldataload(add(signature.offset, 0x20))\n        }\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert InvalidSignature();\n        }\n\n        bool success = _erc1271IsValidSignatureViaSafeCaller(sender, hash, signature)\n            || _erc1271IsValidSignatureViaNestedEIP712(hash, signature)\n            || _erc1271IsValidSignatureViaRPC(hash, signature);\n\n        bytes4 sigValidationResult;\n        assembly {\n            // `success ? bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")) : 0xffffffff`.\n            // We use `0xffffffff` for invalid, in convention with the reference implementation.\n            sigValidationResult := shl(224, or(0x1626ba7e, sub(0, iszero(success))))\n        }\n        return sigValidationResult;\n    }\n\n    /// @dev Returns whether the `msg.sender` is considered safe, such\n    /// that we don't need to use the nested EIP-712 workflow.\n    /// Override to return true for more callers.\n    /// See: https://mirror.xyz/curiousapple.eth/pFqAdW2LiJ-6S4sg_u1z08k4vK6BCJ33LcyXpnNb8yU\n    function _erc1271CallerIsSafe(address sender) internal view virtual returns (bool) {\n        // The canonical `MulticallerWithSigner` at 0x000000000000D9ECebf3C23529de49815Dac1c4c\n        // is known to include the account in the hash to be signed.\n        return sender == 0x000000000000D9ECebf3C23529de49815Dac1c4c;\n    }\n\n    /// @dev Returns whether the `hash` and `signature` are valid.\n    ///      Obtains the authorized signer's credentials and calls some\n    ///      module's specific internal function to validate the signature\n    ///      against credentials.\n    /// Override for your module's custom logic.\n    function _erc1271IsValidSignatureNowCalldata(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool);\n\n    /// @dev Unwraps and returns the signature.\n    function _erc1271UnwrapSignature(bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bytes calldata result)\n    {\n        result = signature;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Unwraps the ERC6492 wrapper if it exists.\n            // See: https://eips.ethereum.org/EIPS/eip-6492\n            if eq(\n                calldataload(add(result.offset, sub(result.length, 0x20))),\n                mul(0x6492, div(not(shr(address(), address())), 0xffff)) // `0x6492...6492`.\n            ) {\n                let o := add(result.offset, calldataload(add(result.offset, 0x40)))\n                result.length := calldataload(o)\n                result.offset := add(o, 0x20)\n            }\n        }\n    }\n\n    /// @dev Performs the signature validation without nested EIP-712 if the caller is\n    /// a safe caller. A safe caller must include the address of this account in the hash.\n    function _erc1271IsValidSignatureViaSafeCaller(address sender, bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        if (_erc1271CallerIsSafe(sender)) result = _erc1271IsValidSignatureNowCalldata(hash, signature);\n    }\n\n    /// @dev ERC1271 signature validation (Nested EIP-712 workflow).\n    ///\n    /// This uses ECDSA recovery by default (see: `_erc1271IsValidSignatureNowCalldata`).\n    /// It also uses a nested EIP-712 approach to prevent signature replays when a single EOA\n    /// owns multiple smart contract accounts,\n    /// while still enabling wallet UIs (e.g. Metamask) to show the EIP-712 values.\n    ///\n    /// Crafted for phishing resistance, efficiency, flexibility.\n    /// __________________________________________________________________________________________\n    ///\n    /// Glossary:\n    ///\n    /// - `APP_DOMAIN_SEPARATOR`: The domain separator of the `hash` passed in by the application.\n    ///   Provided by the front end. Intended to be the domain separator of the contract\n    ///   that will call `isValidSignature` on this account.\n    ///\n    /// - `ACCOUNT_DOMAIN_SEPARATOR`: The domain separator of this account.\n    ///   See: `EIP712._domainSeparator()`.\n    /// __________________________________________________________________________________________\n    ///\n    /// For the `TypedDataSign` workflow, the final hash will be:\n    /// ```\n    ///     keccak256(\\x19\\x01 ‖ APP_DOMAIN_SEPARATOR ‖\n    ///         hashStruct(TypedDataSign({\n    ///             contents: hashStruct(originalStruct),\n    ///             name: keccak256(bytes(eip712Domain().name)),\n    ///             version: keccak256(bytes(eip712Domain().version)),\n    ///             chainId: eip712Domain().chainId,\n    ///             verifyingContract: eip712Domain().verifyingContract,\n    ///             salt: eip712Domain().salt\n    ///         }))\n    ///     )\n    /// ```\n    /// where `‖` denotes the concatenation operator for bytes.\n    /// The order of the fields is important: `contents` comes before `name`.\n    ///\n    /// The signature will be `r ‖ s ‖ v ‖ APP_DOMAIN_SEPARATOR ‖\n    ///     contents ‖ contentsDescription ‖ uint16(contentsDescription.length)`,\n    /// where:\n    /// - `contents` is the bytes32 struct hash of the original struct.\n    /// - `contentsDescription` can be either:\n    ///     a) `contentsType` (implicit mode)\n    ///         where `contentsType` starts with `contentsName`.\n    ///     b) `contentsType ‖ contentsName` (explicit mode)\n    ///         where `contentsType` may not necessarily start with `contentsName`.\n    ///\n    /// The `APP_DOMAIN_SEPARATOR` and `contents` will be used to verify if `hash` is indeed correct.\n    /// __________________________________________________________________________________________\n    ///\n    /// For the `PersonalSign` workflow, the final hash will be:\n    /// ```\n    ///     keccak256(\\x19\\x01 ‖ ACCOUNT_DOMAIN_SEPARATOR ‖\n    ///         hashStruct(PersonalSign({\n    ///             prefixed: keccak256(bytes(\\x19Ethereum Signed Message:\\n ‖\n    ///                 base10(bytes(someString).length) ‖ someString))\n    ///         }))\n    ///     )\n    /// ```\n    /// where `‖` denotes the concatenation operator for bytes.\n    ///\n    /// The `PersonalSign` type hash will be `keccak256(\"PersonalSign(bytes prefixed)\")`.\n    /// The signature will be `r ‖ s ‖ v`.\n    /// __________________________________________________________________________________________\n    ///\n    /// For demo and typescript code, see:\n    /// - https://github.com/junomonster/nested-eip-712\n    /// - https://github.com/frangio/eip712-wrapper-for-eip1271\n    ///\n    /// Their nomenclature may differ from ours, although the high-level idea is similar.\n    ///\n    /// Of course, if you have control over the codebase of the wallet client(s) too,\n    /// you can choose a more minimalistic signature scheme like\n    /// `keccak256(abi.encode(address(this), hash))` instead of all these acrobatics.\n    /// All these are just for widespread out-of-the-box compatibility with other wallet clients.\n    /// We want to create bazaars, not walled castles.\n    /// And we'll use push the Turing Completeness of the EVM to the limits to do so.\n    function _erc1271IsValidSignatureViaNestedEIP712(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        //bytes32 t = _typedDataSignFieldsForAccount(msg.sender);\n        uint256 t = uint256(uint160(address(this)));\n        // Forces the compiler to pop the variables after the scope, avoiding stack-too-deep.\n        if (t != uint256(0)) {\n            (\n                ,\n                string memory name,\n                string memory version,\n                uint256 chainId,\n                address verifyingContract,\n                bytes32 salt,\n            ) = IERC5267(msg.sender).eip712Domain();\n            /// @solidity memory-safe-assembly\n            assembly {\n                t := mload(0x40) // Grab the free memory pointer.\n                // Skip 2 words for the `typedDataSignTypehash` and `contents` struct hash.\n                mstore(add(t, 0x40), keccak256(add(name, 0x20), mload(name)))\n                mstore(add(t, 0x60), keccak256(add(version, 0x20), mload(version)))\n                mstore(add(t, 0x80), chainId)\n                mstore(add(t, 0xa0), shr(96, shl(96, verifyingContract)))\n                mstore(add(t, 0xc0), salt)\n                mstore(0x40, add(t, 0xe0)) // Allocate the memory.\n            }\n        }\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            // `c` is `contentsDescription.length`, which is stored in the last 2 bytes of the signature.\n            let c := shr(240, calldataload(add(signature.offset, sub(signature.length, 2))))\n            for {} 1 {} {\n                let l := add(0x42, c) // Total length of appended data (32 + 32 + c + 2).\n                let o := add(signature.offset, sub(signature.length, l)) // Offset of appended data.\n                mstore(0x00, 0x1901) // Store the \"\\x19\\x01\" prefix.\n                calldatacopy(0x20, o, 0x40) // Copy the `APP_DOMAIN_SEPARATOR` and `contents` struct hash.\n                // Use the `PersonalSign` workflow if the reconstructed hash doesn't match,\n                // or if the appended data is invalid, i.e.\n                // `appendedData.length > signature.length || contentsDescription.length == 0`.\n                if or(xor(keccak256(0x1e, 0x42), hash), or(lt(signature.length, l), iszero(c))) {\n                    t := 0 // Set `t` to 0, denoting that we need to `hash = _hashTypedData(hash)`.\n                    mstore(t, _PERSONAL_SIGN_TYPEHASH)\n                    mstore(0x20, hash) // Store the `prefixed`.\n                    hash := keccak256(t, 0x40) // Compute the `PersonalSign` struct hash.\n                    break\n                }\n                // Else, use the `TypedDataSign` workflow.\n                // `TypedDataSign({ContentsName} contents,string name,...){ContentsType}`.\n                mstore(m, \"TypedDataSign(\") // Store the start of `TypedDataSign`'s type encoding.\n                let p := add(m, 0x0e) // Advance 14 bytes to skip \"TypedDataSign(\".\n                \n                calldatacopy(p, add(o, 0x40), c) // Copy `contentsName`, optimistically.\n                mstore(add(p, c), 40) // Store a '(' after the end.\n                if iszero(eq(byte(0, mload(sub(add(p, c), 1))), 41)) {\n                    let e := 0 // Length of `contentsName` in explicit mode.\n                    for { let q := sub(add(p, c), 1) } 1 {} {\n                        e := add(e, 1) // Scan backwards until we encounter a ')'.\n                        if iszero(gt(lt(e, c), eq(byte(0, mload(sub(q, e))), 41))) { break }\n                    }\n                    c := sub(c, e) // Truncate `contentsDescription` to `contentsType`.\n                    calldatacopy(p, add(add(o, 0x40), c), e) // Copy `contentsName`.\n                    mstore8(add(p, e), 40) // Store a '(' exactly right after the end.\n                }\n\n                // `d & 1 == 1` means that `contentsName` is invalid.\n                let d := shr(byte(0, mload(p)), 0x7fffffe000000000000010000000000) // Starts with `[a-z(]`.\n                // Advance `p` until we encounter '('.\n                for {} iszero(eq(byte(0, mload(p)), 40)) { p := add(p, 1) } {\n                    d := or(shr(byte(0, mload(p)), 0x120100000001), d) // Has a byte in \", )\\x00\".\n                }\n                mstore(p, \" contents,string name,string\") // Store the rest of the encoding.\n                mstore(add(p, 0x1c), \" version,uint256 chainId,address\")\n                mstore(add(p, 0x3c), \" verifyingContract,bytes32 salt)\")\n                p := add(p, 0x5c)\n                calldatacopy(p, add(o, 0x40), c) // Copy `contentsType`.\n                // Fill in the missing fields of the `TypedDataSign`.\n                calldatacopy(t, o, 0x40) // Copy the `contents` struct hash to `add(t, 0x20)`.\n                mstore(t, keccak256(m, sub(add(p, c), m))) // Store `typedDataSignTypehash`.\n                // The \"\\x19\\x01\" prefix is already at 0x00.\n                // `APP_DOMAIN_SEPARATOR` is already at 0x20.\n                mstore(0x40, keccak256(t, 0xe0)) // `hashStruct(typedDataSign)`.\n                // Compute the final hash, corrupted if `contentsName` is invalid.\n                hash := keccak256(0x1e, add(0x42, and(1, d)))\n                signature.length := sub(signature.length, l) // Truncate the signature.\n                break\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n        if (t == uint256(0)) hash = _hashTypedDataForAccount(msg.sender, hash); // `PersonalSign` workflow.\n        result = _erc1271IsValidSignatureNowCalldata(hash, signature);\n    }\n\n    /// @dev Performs the signature validation without nested EIP-712 to allow for easy sign ins.\n    /// This function must always return false or revert if called on-chain.\n    function _erc1271IsValidSignatureViaRPC(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        // Non-zero gasprice is a heuristic to check if a call is on-chain,\n        // but we can't fully depend on it because it can be manipulated.\n        // See: https://x.com/NoahCitron/status/1580359718341484544\n        if (tx.gasprice == uint256(0)) {\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(gasprice(), gasprice())\n                // See: https://gist.github.com/Vectorized/3c9b63524d57492b265454f62d895f71\n                let b := 0x000000000000378eDCD5B5B0A24f5342d8C10485 // Basefee contract,\n                pop(staticcall(0xffff, b, codesize(), gasprice(), gasprice(), 0x20))\n                // If `gasprice < basefee`, the call cannot be on-chain, and we can skip the gas burn.\n                if iszero(mload(gasprice())) {\n                    let m := mload(0x40) // Cache the free memory pointer.\n                    mstore(gasprice(), 0x1626ba7e) // `isValidSignature(bytes32,bytes)`.\n                    mstore(0x20, b) // Recycle `b` to denote if we need to burn gas.\n                    mstore(0x40, 0x40)\n                    let gasToBurn := or(add(0xffff, gaslimit()), gaslimit())\n                    // Burns gas computationally efficiently. Also, requires that `gas > gasToBurn`.\n                    if or(eq(hash, b), lt(gas(), gasToBurn)) { invalid() }\n                    // Make a call to this with `b`, efficiently burning the gas provided.\n                    // No valid transaction can consume more than the gaslimit.\n                    // See: https://ethereum.github.io/yellowpaper/paper.pdf\n                    // Most RPCs perform calls with a gas budget greater than the gaslimit.\n                    pop(staticcall(gasToBurn, address(), 0x1c, 0x64, gasprice(), gasprice()))\n                    mstore(0x40, m) // Restore the free memory pointer.\n                }\n            }\n            result = _erc1271IsValidSignatureNowCalldata(hash, signature);\n        }\n    }\n\n    /// @notice Hashes typed data according to eip-712\n    ///         Uses account's domain separator\n    /// @param account the smart account, who's domain separator will be used\n    /// @param structHash the typed data struct hash\n    function _hashTypedDataForAccount(address account, bytes32 structHash) private view returns (bytes32 digest) {\n        (\n            /*bytes1 fields*/,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            /*bytes32 salt*/,\n            /*uint256[] memory extensions*/\n        ) = IERC5267(account).eip712Domain();\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            //Rebuild domain separator out of 712 domain\n            let m := mload(0x40) // Load the free memory pointer.\n            mstore(m, _DOMAIN_TYPEHASH)\n            mstore(add(m, 0x20), keccak256(add(name, 0x20), mload(name))) // Name hash.\n            mstore(add(m, 0x40), keccak256(add(version, 0x20), mload(version))) // Version hash.\n            mstore(add(m, 0x60), chainId)\n            mstore(add(m, 0x80), verifyingContract)\n            digest := keccak256(m, 0xa0) //domain separator\n\n            // Hash typed data\n            mstore(0x00, 0x1901000000000000) // Store \"\\x19\\x01\".\n            mstore(0x1a, digest) // Store the domain separator.\n            mstore(0x3a, structHash) // Store the struct hash.\n            digest := keccak256(0x18, 0x42)\n            // Restore the part of the free memory slot that was overwritten.\n            mstore(0x3a, 0)\n        }\n    }\n\n    /// @dev Backwards compatibility stuff\n    /// For automatic detection that the smart account supports the nested EIP-712 workflow.\n    /// By default, it returns `bytes32(bytes4(keccak256(\"supportsNestedTypedDataSign()\")))`,\n    /// denoting support for the default behavior, as implemented in\n    /// `_erc1271IsValidSignatureViaNestedEIP712`, which is called in `isValidSignature`.\n    /// Future extensions should return a different non-zero `result` to denote different behavior.\n    /// This method intentionally returns bytes32 to allow freedom for future extensions.\n    function supportsNestedTypedDataSign() public view virtual returns (bytes32 result) {\n        result = bytes4(0xd620c85a);\n    }\n\n}\n"},"contracts/libraries/storage/EnumerableSet4337.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.27;\n\nimport \"./AssociatedArrayLib.sol\";\n\n/**\n * Fork of OZ's EnumerableSet that makes all storage access ERC-4337 compliant via associated storage\n * @author zeroknots.eth (rhinestone)\n */\nlibrary EnumerableSet {\n    using AssociatedArrayLib for AssociatedArrayLib.Bytes32Array;\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        AssociatedArrayLib.Bytes32Array _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => mapping(address account => uint256)) _positions;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    function _removeAll(Set storage set, address account) internal {\n        // get length of the array\n        uint256 len = _length(set, account);\n        for (uint256 i = 1; i <= len; i++) {\n            // get last value\n            bytes32 value = _at(set, account, len - i);\n            _remove(set, account, value);\n        }\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, address account, bytes32 value) internal returns (bool) {\n        return _add(set._inner, account, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, address account, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, account, value);\n    }\n\n    function removeAll(Bytes32Set storage set, address account) internal {\n        return _removeAll(set._inner, account);\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address account, address value) internal returns (bool) {\n        return _add(set._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address account, address value) internal returns (bool) {\n        return _remove(set._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    function removeAll(AddressSet storage set, address account) internal {\n        return _removeAll(set._inner, account);\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, address account, uint256 value) internal returns (bool) {\n        return _add(set._inner, account, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, address account, uint256 value) internal returns (bool) {\n        return _remove(set._inner, account, bytes32(value));\n    }\n\n    function removeAll(UintSet storage set, address account) internal {\n        return _removeAll(set._inner, account);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, address account, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, account, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set, address account) internal view returns (uint256) {\n        return _length(set._inner, account);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, address account, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, account, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set, address account) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner, account);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address account, address value) internal view returns (bool) {\n        return _contains(set._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set, address account) internal view returns (uint256) {\n        return _length(set._inner, account);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, address account, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, account, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set, address account) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner, account);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, address account, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, account, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set, address account) internal view returns (uint256) {\n        return _length(set._inner, account);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, address account, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, account, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set, address account) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner, account);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, address account, bytes32 value) private returns (bool) {\n        if (!_contains(set, account, value)) {\n            set._values.push(account, value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value][account] = set._values.length(account);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, address account, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value][account];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length(account) - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values.get(account, lastIndex);\n\n                // Move the lastValue to the index where the value to delete is\n                set._values.set(account, valueIndex, lastValue);\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue][account] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop(account);\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value][account];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, address account, bytes32 value) private view returns (bool) {\n        return set._positions[value][account] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set, address account) private view returns (uint256) {\n        return set._values.length(account);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, address account, uint256 index) private view returns (bytes32) {\n        return set._values.get(account, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set, address account) private view returns (bytes32[] memory) {\n        return set._values.getAll(account);\n    }\n}\n"},"contracts/libraries/SuperTxEcdsaValidatorLib.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.27;\n\nimport \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport \"./fusion/PermitValidatorLib.sol\";\nimport \"./fusion/TxValidatorLib.sol\";\nimport \"./fusion/EcdsaValidatorLib.sol\";\nimport \"./fusion/UserOpValidatorLib.sol\";\nimport \"./util/BytesLib.sol\";\n\nlibrary SuperTxEcdsaValidatorLib {\n    using BytesLib for bytes;\n\n    enum SuperSignatureType {\n        OFF_CHAIN,\n        ON_CHAIN,\n        ERC20_PERMIT,\n        USEROP\n    }\n\n    uint8 constant SIG_TYPE_OFF_CHAIN = 0x00;\n    uint8 constant SIG_TYPE_ON_CHAIN = 0x01;\n    uint8 constant SIG_TYPE_ERC20_PERMIT = 0x02;\n    // ...leave space for other sig types: ERC-7683, Permit2, etc\n    uint8 constant SIG_TYPE_USEROP = 0xff;\n\n    struct SuperSignature {\n        SuperSignatureType signatureType;\n        bytes signature;\n    }\n\n    function validateUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash, address owner)\n        internal\n        returns (uint256)\n    {\n        SuperSignature memory decodedSig = decodeSignature(userOp.signature);\n\n        if (decodedSig.signatureType == SuperSignatureType.OFF_CHAIN) {\n            return EcdsaValidatorLib.validateUserOp(userOp, decodedSig.signature, owner);\n        } else if (decodedSig.signatureType == SuperSignatureType.ON_CHAIN) {\n            return TxValidatorLib.validateUserOp(userOp, decodedSig.signature, owner);\n        } else if (decodedSig.signatureType == SuperSignatureType.ERC20_PERMIT) {\n            return PermitValidatorLib.validateUserOp(userOp, decodedSig.signature, owner);\n        } else if (decodedSig.signatureType == SuperSignatureType.USEROP) {\n            return UserOpValidatorLib.validateUserOp(userOpHash, decodedSig.signature, owner);\n        } else {\n            revert(\"SuperTxEcdsaValidatorLib:: invalid userOp sig type\");\n        }\n    }\n\n    function validateSignatureForOwner(address owner, bytes32 hash, bytes memory signature)\n        internal\n        pure\n        returns (bool)\n    {\n        SuperSignature memory decodedSig = decodeSignature(signature);\n\n        if (decodedSig.signatureType == SuperSignatureType.OFF_CHAIN) {\n            return EcdsaValidatorLib.validateSignatureForOwner(owner, hash, decodedSig.signature);\n        } else if (decodedSig.signatureType == SuperSignatureType.ON_CHAIN) {\n            return TxValidatorLib.validateSignatureForOwner(owner, hash, decodedSig.signature);\n        } else if (decodedSig.signatureType == SuperSignatureType.ERC20_PERMIT) {\n            return PermitValidatorLib.validateSignatureForOwner(owner, hash, decodedSig.signature);\n        } else if (decodedSig.signatureType == SuperSignatureType.USEROP) {\n            return UserOpValidatorLib.validateSignatureForOwner(owner, hash, decodedSig.signature);\n        } else {\n            revert(\"SuperTxEcdsaValidatorLib:: invalid userOp sig type\");\n        }\n    }\n\n    function decodeSignature(bytes memory self) internal pure returns (SuperSignature memory) {\n        bytes memory sig = self.slice(1, self.length - 1);\n        if (uint8(self[0]) == SIG_TYPE_OFF_CHAIN) {\n            return SuperSignature(SuperSignatureType.OFF_CHAIN, sig);\n        } else if (uint8(self[0]) == SIG_TYPE_ON_CHAIN) {\n            return SuperSignature(SuperSignatureType.ON_CHAIN, sig);\n        } else if (uint8(self[0]) == SIG_TYPE_ERC20_PERMIT) {\n            return SuperSignature(SuperSignatureType.ERC20_PERMIT, sig);\n        } else if (uint8(self[0]) == SIG_TYPE_USEROP) {\n            return SuperSignature(SuperSignatureType.USEROP, sig);\n        } else {\n            revert(\n                \"SuperTxEcdsaValidatorLib:: invalid sig type. Expected prefix 0x00 for off-chain, 0x01 for on-chain or 0x02 for erc20 permit itx hash signature or 0xff for normal userOp signature.\"\n            );\n        }\n    }\n}\n"},"node_modules/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\n/**\n * User Operation struct\n * @param sender                - The sender account of this request.\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\n * @param initCode              - If set, the account contract will be created by this constructor/\n * @param callData              - The method call to execute on this account.\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\n *                                Covers batch overhead.\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\n *                                The paymaster will pay for the transaction instead of the sender.\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n */\nstruct PackedUserOperation {\n    address sender;\n    uint256 nonce;\n    bytes initCode;\n    bytes callData;\n    bytes32 accountGasLimits;\n    uint256 preVerificationGas;\n    bytes32 gasFees;\n    bytes paymasterAndData;\n    bytes signature;\n}\n"},"contracts/libraries/storage/AssociatedArrayLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nlibrary AssociatedArrayLib {\n    using AssociatedArrayLib for *;\n\n    struct Array {\n        uint256 _spacer;\n    }\n\n    struct Bytes32Array {\n        Array _inner;\n    }\n\n    struct AddressArray {\n        Array _inner;\n    }\n\n    struct UintArray {\n        Array _inner;\n    }\n\n    error AssociatedArray_OutOfBounds(uint256 index);\n\n    function add(Bytes32Array storage s, address account, bytes32 value) internal {\n        if (!_contains(s._inner, account, value)) {\n            _push(s._inner, account, value);\n        }\n    }\n\n    function set(Bytes32Array storage s, address account, uint256 index, bytes32 value) internal {\n        _set(s._inner, account, index, value);\n    }\n\n    function push(Bytes32Array storage s, address account, bytes32 value) internal {\n        _push(s._inner, account, value);\n    }\n\n    function pop(Bytes32Array storage s, address account) internal {\n        _pop(s._inner, account);\n    }\n\n    function remove(Bytes32Array storage s, address account, uint256 index) internal {\n        _remove(s._inner, account, index);\n    }\n\n    function add(UintArray storage s, address account, uint256 value) internal {\n        if (!_contains(s._inner, account, bytes32(value))) {\n            _push(s._inner, account, bytes32(value));\n        }\n    }\n\n    function set(UintArray storage s, address account, uint256 index, uint256 value) internal {\n        _set(s._inner, account, index, bytes32(value));\n    }\n\n    function push(UintArray storage s, address account, uint256 value) internal {\n        _push(s._inner, account, bytes32(value));\n    }\n\n    function pop(UintArray storage s, address account) internal {\n        _pop(s._inner, account);\n    }\n\n    function remove(UintArray storage s, address account, uint256 index) internal {\n        _remove(s._inner, account, index);\n    }\n\n    function add(AddressArray storage s, address account, address value) internal {\n        if (!_contains(s._inner, account, bytes32(uint256(uint160(value))))) {\n            _push(s._inner, account, bytes32(uint256(uint160(value))));\n        }\n    }\n\n    function set(AddressArray storage s, address account, uint256 index, address value) internal {\n        _set(s._inner, account, index, bytes32(uint256(uint160(value))));\n    }\n\n    function push(AddressArray storage s, address account, address value) internal {\n        _push(s._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    function pop(AddressArray storage s, address account) internal {\n        _pop(s._inner, account);\n    }\n\n    function remove(AddressArray storage s, address account, uint256 index) internal {\n        _remove(s._inner, account, index);\n    }\n\n    function length(Bytes32Array storage s, address account) internal view returns (uint256) {\n        return _length(s._inner, account);\n    }\n\n    function get(Bytes32Array storage s, address account, uint256 index) internal view returns (bytes32) {\n        return _get(s._inner, account, index);\n    }\n\n    function getAll(Bytes32Array storage s, address account) internal view returns (bytes32[] memory) {\n        return _getAll(s._inner, account);\n    }\n\n    function contains(Bytes32Array storage s, address account, bytes32 value) internal view returns (bool) {\n        return _contains(s._inner, account, value);\n    }\n\n    function length(AddressArray storage s, address account) internal view returns (uint256) {\n        return _length(s._inner, account);\n    }\n\n    function get(AddressArray storage s, address account, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_get(s._inner, account, index))));\n    }\n\n    function getAll(AddressArray storage s, address account) internal view returns (address[] memory) {\n        bytes32[] memory bytes32Array = _getAll(s._inner, account);\n        address[] memory addressArray;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            addressArray := bytes32Array\n        }\n        return addressArray;\n    }\n\n    function contains(AddressArray storage s, address account, address value) internal view returns (bool) {\n        return _contains(s._inner, account, bytes32(uint256(uint160(value))));\n    }\n\n    function length(UintArray storage s, address account) internal view returns (uint256) {\n        return _length(s._inner, account);\n    }\n\n    function get(UintArray storage s, address account, uint256 index) internal view returns (uint256) {\n        return uint256(_get(s._inner, account, index));\n    }\n\n    function getAll(UintArray storage s, address account) internal view returns (uint256[] memory) {\n        bytes32[] memory bytes32Array = _getAll(s._inner, account);\n        uint256[] memory uintArray;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            uintArray := bytes32Array\n        }\n        return uintArray;\n    }\n\n    function contains(UintArray storage s, address account, uint256 value) internal view returns (bool) {\n        return _contains(s._inner, account, bytes32(value));\n    }\n\n    function _set(Array storage s, address account, uint256 index, bytes32 value) private {\n        _set(_slot(s, account), index, value);\n    }\n\n    function _set(bytes32 slot, uint256 index, bytes32 value) private {\n        assembly {\n            //if (index >= _length(s, account)) revert AssociatedArray_OutOfBounds(index);\n            if iszero(lt(index, sload(slot))) {\n                mstore(0, 0x8277484f) // `AssociatedArray_OutOfBounds(uint256)`\n                mstore(0x20, index)\n                revert(0x1c, 0x24)\n            }\n            sstore(add(slot, mul(0x20, add(index, 1))), value)\n        }\n    }\n\n    function _push(Array storage s, address account, bytes32 value) private {\n        bytes32 slot = _slot(s, account);\n        assembly {\n            // load length (stored @ slot), add 1 to it => index.\n            // mul index by 0x20 and add it to orig slot to get the next free slot\n            let index := add(sload(slot), 1)\n            sstore(add(slot, mul(0x20, index)), value)\n            sstore(slot, index) //increment length by 1\n        }\n    }\n\n    function _pop(Array storage s, address account) private {\n        bytes32 slot = _slot(s, account);\n        uint256 __length;\n        assembly {\n            __length := sload(slot)\n        }\n        if (__length == 0) return;\n        _set(slot, __length - 1, 0);\n        assembly {\n            sstore(slot, sub(__length, 1))\n        }\n    }\n\n    function _remove(Array storage s, address account, uint256 index) private {\n        bytes32 slot = _slot(s, account);\n        uint256 __length;\n        assembly {\n            __length := sload(slot)\n            if iszero(lt(index, __length)) {\n                mstore(0, 0x8277484f) // `AssociatedArray_OutOfBounds(uint256)`\n                mstore(0x20, index)\n                revert(0x1c, 0x24)\n            }\n        }\n        _set(slot, index, _get(s, account, __length - 1));\n\n        assembly {\n            // clear the last slot\n            // this is the 'unchecked' version of _set(slot, __length - 1, 0)\n            // as we use length-1 as index, so the check is excessive.\n            // also removes extra -1 and +1 operations\n            sstore(add(slot, mul(0x20, __length)), 0)\n            // store new length\n            sstore(slot, sub(__length, 1))\n        }\n    }\n\n    function _length(Array storage s, address account) private view returns (uint256 __length) {\n        bytes32 slot = _slot(s, account);\n        assembly {\n            __length := sload(slot)\n        }\n    }\n\n    function _get(Array storage s, address account, uint256 index) private view returns (bytes32 value) {\n        return _get(_slot(s, account), index);\n    }\n\n    function _get(bytes32 slot, uint256 index) private view returns (bytes32 value) {\n        assembly {\n            //if (index >= _length(s, account)) revert AssociatedArray_OutOfBounds(index);\n            if iszero(lt(index, sload(slot))) {\n                mstore(0, 0x8277484f) // `AssociatedArray_OutOfBounds(uint256)`\n                mstore(0x20, index)\n                revert(0x1c, 0x24)\n            }\n            value := sload(add(slot, mul(0x20, add(index, 1))))\n        }\n    }\n\n    function _getAll(Array storage s, address account) private view returns (bytes32[] memory values) {\n        bytes32 slot = _slot(s, account);\n        uint256 __length;\n        assembly {\n            __length := sload(slot)\n        }\n        values = new bytes32[](__length);\n        for (uint256 i; i < __length; i++) {\n            values[i] = _get(slot, i);\n        }\n    }\n\n    // inefficient. complexity = O(n)\n    // use with caution\n    // in case of large arrays, consider using EnumerableSet4337 instead\n    function _contains(Array storage s, address account, bytes32 value) private view returns (bool) {\n        bytes32 slot = _slot(s, account);\n        uint256 __length;\n        assembly {\n            __length := sload(slot)\n        }\n        for (uint256 i; i < __length; i++) {\n            if (_get(slot, i) == value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _slot(Array storage s, address account) private pure returns (bytes32 __slot) {\n        assembly {\n            mstore(0x00, account)\n            mstore(0x20, s.slot)\n            __slot := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"contracts/libraries/fusion/PermitValidatorLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\nimport \"openzeppelin/utils/cryptography/MerkleProof.sol\";\nimport \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport \"account-abstraction/core/Helpers.sol\";\nimport \"../../interfaces/IERC20Permit.sol\";\nimport \"../util/EcdsaLib.sol\";\nimport \"../util/UserOpLib.sol\";\n\nlibrary PermitValidatorLib {\n    uint8 constant EIP_155_MIN_V_VALUE = 37;\n\n    using MessageHashUtils for bytes32;\n\n    struct DecodedErc20PermitSig {\n        IERC20Permit token;\n        address spender;\n        bytes32 permitTypehash;\n        bytes32 domainSeparator;\n        uint256 amount;\n        uint256 chainId;\n        uint256 nonce;\n        bool isPermitTx;\n        bytes32 appendedHash;\n        bytes32[] proof;\n        uint48 lowerBoundTimestamp;\n        uint48 upperBoundTimestamp;\n        uint256 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /**\n     * This function parses the given userOpSignature into a DecodedErc20PermitSig data structure.\n     *\n     * Once parsed, the function will check for two conditions:\n     *      1. is the expected hash found in the signed Permit message's deadline field?\n     *      2. is the recovered message signer equal to the expected signer?\n     *\n     * If both conditions are met - outside contract can be sure that the expected signer has indeed\n     * approved the given hash by signing a given Permit message.\n     *\n     * NOTES: This function will revert if either of following is met:\n     *    1. the userOpSignature couldn't be abi.decoded into a valid DecodedErc20PermitSig struct as defined in this contract\n     *    2. extracted hash wasn't equal to the provided expected hash\n     *    3. recovered Permit message signer wasn't equal to the expected signer\n     *\n     * Returns true if the expected signer did indeed approve the given expectedHash by signing an on-chain transaction.\n     * In that case, the function will also perform the Permit approval on the given token in case the\n     * isPermitTx flag was set to true in the decoded signature struct.\n     *\n     * @param userOp UserOp being validated.\n     * @param parsedSignature Signature provided as the userOp.signature parameter (minus the prepended tx type byte).\n     * @param expectedSigner Signer expected to be recovered when decoding the ERC20OPermit signature.\n     */\n    function validateUserOp(PackedUserOperation calldata userOp, bytes memory parsedSignature, address expectedSigner)\n        internal\n        returns (uint256)\n    {\n        DecodedErc20PermitSig memory decodedSig = abi.decode(parsedSignature, (DecodedErc20PermitSig));\n\n        bytes32 userOpHash =\n            UserOpLib.getUserOpHash(userOp, decodedSig.lowerBoundTimestamp, decodedSig.upperBoundTimestamp);\n\n        uint8 vAdjusted = _adjustV(decodedSig.v);\n        uint256 deadline = uint256(decodedSig.appendedHash);\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                decodedSig.permitTypehash,\n                expectedSigner,\n                decodedSig.spender,\n                decodedSig.amount,\n                decodedSig.nonce,\n                deadline\n            )\n        );\n\n        bytes32 signedDataHash = _hashTypedDataV4(structHash, decodedSig.domainSeparator);\n        bytes memory signature = abi.encodePacked(decodedSig.r, decodedSig.s, vAdjusted);\n\n        if (!EcdsaLib.isValidSignature(expectedSigner, signedDataHash, signature)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        if (!MerkleProof.verify(decodedSig.proof, decodedSig.appendedHash, userOpHash)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        if (decodedSig.isPermitTx) {\n            decodedSig.token.permit(\n                expectedSigner, userOp.sender, decodedSig.amount, deadline, vAdjusted, decodedSig.r, decodedSig.s\n            );\n        }\n\n        return _packValidationData(false, decodedSig.upperBoundTimestamp, decodedSig.lowerBoundTimestamp);\n    }\n\n    function validateSignatureForOwner(address expectedSigner, bytes32 hash, bytes memory parsedSignature)\n        internal\n        pure\n        returns (bool)\n    {\n        DecodedErc20PermitSig memory decodedSig = abi.decode(parsedSignature, (DecodedErc20PermitSig));\n\n        uint8 vAdjusted = _adjustV(decodedSig.v);\n        uint256 deadline = uint256(decodedSig.appendedHash);\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                decodedSig.permitTypehash,\n                expectedSigner,\n                decodedSig.spender,\n                decodedSig.amount,\n                decodedSig.nonce,\n                deadline\n            )\n        );\n\n        bytes32 signedDataHash = _hashTypedDataV4(structHash, decodedSig.domainSeparator);\n        bytes memory signature = abi.encodePacked(decodedSig.r, decodedSig.s, vAdjusted);\n\n        if (!EcdsaLib.isValidSignature(expectedSigner, signedDataHash, signature)) {\n            return false;\n        }\n\n        if (!MerkleProof.verify(decodedSig.proof, decodedSig.appendedHash, hash)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function _hashTypedDataV4(bytes32 structHash, bytes32 domainSeparator) private pure returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(domainSeparator, structHash);\n    }\n\n    function _adjustV(uint256 v) private pure returns (uint8) {\n        if (v >= EIP_155_MIN_V_VALUE) {\n            return uint8((v - 2 * _extractChainIdFromV(v) - 35) + 27);\n        } else if (v <= 1) {\n            return uint8(v + 27);\n        } else {\n            return uint8(v);\n        }\n    }\n\n    function _extractChainIdFromV(uint256 v) private pure returns (uint256 chainId) {\n        chainId = (v - 35) / 2;\n    }\n}\n"},"contracts/libraries/fusion/TxValidatorLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport \"openzeppelin/utils/cryptography/MerkleProof.sol\";\nimport \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport \"account-abstraction/core/Helpers.sol\";\nimport \"../rlp/RLPDecoder.sol\";\nimport \"../rlp/RLPEncoder.sol\";\nimport \"../util/BytesLib.sol\";\nimport \"../util/UserOpLib.sol\";\nimport \"../util/EcdsaLib.sol\";\n\nlibrary TxValidatorLib {\n    uint8 constant LEGACY_TX_TYPE = 0x00;\n    uint8 constant EIP1559_TX_TYPE = 0x02;\n\n    uint8 constant RLP_ENCODED_R_S_BYTE_SIZE = 66; // 2 * 33bytes (for r, s components)\n    uint8 constant EIP_155_MIN_V_VALUE = 37;\n    uint8 constant HASH_BYTE_SIZE = 32;\n\n    uint8 constant TIMESTAMP_BYTE_SIZE = 6;\n    uint8 constant PROOF_ITEM_BYTE_SIZE = 32;\n    uint8 constant ITX_HASH_BYTE_SIZE = 32;\n\n    using RLPDecoder for RLPDecoder.RLPItem;\n    using RLPDecoder for bytes;\n    using RLPEncoder for uint256;\n    using BytesLib for bytes;\n\n    struct TxData {\n        uint8 txType;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        bytes32 utxHash;\n        bytes32 superTxHash;\n        bytes32[] proof;\n        uint48 lowerBoundTimestamp;\n        uint48 upperBoundTimestamp;\n    }\n\n    struct TxParams {\n        uint256 v;\n        bytes32 r;\n        bytes32 s;\n        bytes callData;\n    }\n\n    /**\n     * This function parses the given userOpSignature into a valid fully signed EVM transaction.\n     * Once parsed, the function will check for three conditions:\n     *      1. is the expected hash found in the tx.data as the last 32bytes?\n     *      2. is the recovered tx signer equal to the expected signer?\n     *      2. is the given UserOp a part of the merkle tree\n     *\n     * If all the conditions are met - outside contract can be sure that the expected signer has indeed\n     * approved the given hash by performing given on-chain transaction.\n     *\n     * NOTES: This function will revert if either of following is met:\n     *    1. the userOpSignature couldn't be parsed to a valid fully signed EVM transaction\n     *    2. hash couldn't be extracted from the tx.data\n     *    3. extracted hash wasn't equal to the provided expected hash\n     *    4. recovered signer wasn't equal to the expected signer\n     *\n     * Returns true if the expected signer did indeed approve the given expectedHash by signing an on-chain transaction.\n     *\n     * @param userOp UserOp being validated.\n     * @param parsedSignature Signature provided as the userOp.signature parameter (minus the prepended tx type byte).\n     *                        Expecting to receive fully signed serialized EVM transcaction here of type 0x00 (LEGACY)\n     *                        or 0x02 (EIP1556).\n     *                        For LEGACY tx type the \"0x00\" prefix has to be added manually while the EIP1559 tx type\n     *                        already contains 0x02 prefix.\n     * @param expectedSigner Expected EOA signer of the given userOp and the EVM transaction.\n     */\n    function validateUserOp(PackedUserOperation calldata userOp, bytes memory parsedSignature, address expectedSigner)\n        internal\n        view\n        returns (uint256)\n    {\n        TxData memory decodedTx = decodeTx(parsedSignature);\n\n        bytes32 userOpHash =\n            UserOpLib.getUserOpHash(userOp, decodedTx.lowerBoundTimestamp, decodedTx.upperBoundTimestamp);\n\n        bytes memory signature = abi.encodePacked(decodedTx.r, decodedTx.s, decodedTx.v);\n        if (!EcdsaLib.isValidSignature(expectedSigner, decodedTx.utxHash, signature)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        if (!MerkleProof.verify(decodedTx.proof, decodedTx.superTxHash, userOpHash)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        return _packValidationData(false, decodedTx.upperBoundTimestamp, decodedTx.lowerBoundTimestamp);\n    }\n\n    function validateSignatureForOwner(address expectedSigner, bytes32 hash, bytes memory parsedSignature)\n        internal\n        pure\n        returns (bool)\n    {\n        TxData memory decodedTx = decodeTx(parsedSignature);\n\n        bytes memory signature = abi.encodePacked(decodedTx.r, decodedTx.s, decodedTx.v);\n        if (!EcdsaLib.isValidSignature(expectedSigner, decodedTx.utxHash, signature)) {\n            return false;\n        }\n\n        if (!MerkleProof.verify(decodedTx.proof, decodedTx.superTxHash, hash)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function decodeTx(bytes memory self) internal pure returns (TxData memory) {\n        uint8 txType = uint8(self[0]); //first byte is tx type\n        uint48 lowerBoundTimestamp =\n            uint48(bytes6((self.slice(self.length - 2 * TIMESTAMP_BYTE_SIZE, TIMESTAMP_BYTE_SIZE))));\n        uint48 upperBoundTimestamp = uint48(bytes6(self.slice(self.length - TIMESTAMP_BYTE_SIZE, TIMESTAMP_BYTE_SIZE)));\n        uint8 proofItemsCount = uint8(self[self.length - 2 * TIMESTAMP_BYTE_SIZE - 1]);\n        uint256 appendedDataLen = (uint256(proofItemsCount) * PROOF_ITEM_BYTE_SIZE + 1) + 2 * TIMESTAMP_BYTE_SIZE;\n        bytes memory rlpEncodedTx = self.slice(1, self.length - appendedDataLen - 1);\n        RLPDecoder.RLPItem memory parsedRlpEncodedTx = rlpEncodedTx.toRlpItem();\n        RLPDecoder.RLPItem[] memory parsedRlpEncodedTxItems = parsedRlpEncodedTx.toList();\n        TxParams memory params = extractParams(txType, parsedRlpEncodedTxItems);\n\n        return TxData(\n            txType,\n            _adjustV(params.v),\n            params.r,\n            params.s,\n            calculateUnsignedTxHash(txType, rlpEncodedTx, parsedRlpEncodedTx.payloadLen(), params.v),\n            extractAppendedHash(params.callData),\n            extractProof(self, proofItemsCount),\n            lowerBoundTimestamp,\n            upperBoundTimestamp\n        );\n    }\n\n    function extractParams(uint8 txType, RLPDecoder.RLPItem[] memory items)\n        private\n        pure\n        returns (TxParams memory params)\n    {\n        uint8 dataPos;\n        uint8 vPos;\n        uint8 rPos;\n        uint8 sPos;\n\n        if (txType == LEGACY_TX_TYPE) {\n            dataPos = 5;\n            vPos = 6;\n            rPos = 7;\n            sPos = 8;\n        } else if (txType == EIP1559_TX_TYPE) {\n            dataPos = 7;\n            vPos = 9;\n            rPos = 10;\n            sPos = 11;\n        } else {\n            revert(\"TxValidatorLib:: unsupported evm tx type\");\n        }\n\n        return TxParams(\n            items[vPos].toUint(), bytes32(items[rPos].toUint()), bytes32(items[sPos].toUint()), items[dataPos].toBytes()\n        );\n    }\n\n    function extractAppendedHash(bytes memory callData) private pure returns (bytes32 iTxHash) {\n        if (callData.length < ITX_HASH_BYTE_SIZE) revert(\"TxDecoder:: callData length too short\");\n        iTxHash = bytes32(callData.slice(callData.length - ITX_HASH_BYTE_SIZE, ITX_HASH_BYTE_SIZE));\n    }\n\n    function extractProof(bytes memory signedTx, uint8 proofItemsCount) private pure returns (bytes32[] memory proof) {\n        proof = new bytes32[](proofItemsCount);\n        uint256 pos = signedTx.length - 2 * TIMESTAMP_BYTE_SIZE - 1;\n        for (proofItemsCount; proofItemsCount > 0; proofItemsCount--) {\n            proof[proofItemsCount - 1] = bytes32(signedTx.slice(pos - PROOF_ITEM_BYTE_SIZE, PROOF_ITEM_BYTE_SIZE));\n        }\n    }\n\n    function calculateUnsignedTxHash(uint8 txType, bytes memory rlpEncodedTx, uint256 rlpEncodedTxPayloadLen, uint256 v)\n        private\n        pure\n        returns (bytes32 hash)\n    {\n        uint256 totalSignatureSize = RLP_ENCODED_R_S_BYTE_SIZE + v.encodeUint().length;\n        uint256 totalPrefixSize = rlpEncodedTx.length - rlpEncodedTxPayloadLen;\n        bytes memory rlpEncodedTxNoSigAndPrefix =\n            rlpEncodedTx.slice(totalPrefixSize, rlpEncodedTx.length - totalSignatureSize - totalPrefixSize);\n        if (txType == EIP1559_TX_TYPE) {\n            return keccak256(abi.encodePacked(txType, prependRlpContentSize(rlpEncodedTxNoSigAndPrefix, \"\")));\n        } else if (txType == LEGACY_TX_TYPE) {\n            if (v >= EIP_155_MIN_V_VALUE) {\n                return keccak256(\n                    prependRlpContentSize(\n                        rlpEncodedTxNoSigAndPrefix,\n                        abi.encodePacked(\n                            uint256(_extractChainIdFromV(v)).encodeUint(),\n                            uint256(0).encodeUint(),\n                            uint256(0).encodeUint()\n                        )\n                    )\n                );\n            } else {\n                return keccak256(prependRlpContentSize(rlpEncodedTxNoSigAndPrefix, \"\"));\n            }\n        } else {\n            revert(\"TxValidatorLib:: unsupported tx type\");\n        }\n    }\n\n    function prependRlpContentSize(bytes memory content, bytes memory extraData) public pure returns (bytes memory) {\n        bytes memory combinedContent = abi.encodePacked(content, extraData);\n        return abi.encodePacked(combinedContent.length.encodeLength(RLPDecoder.LIST_SHORT_START), combinedContent);\n    }\n\n    function _adjustV(uint256 v) internal pure returns (uint8) {\n        if (v >= EIP_155_MIN_V_VALUE) {\n            return uint8((v - 2 * _extractChainIdFromV(v) - 35) + 27);\n        } else if (v <= 1) {\n            return uint8(v + 27);\n        } else {\n            return uint8(v);\n        }\n    }\n\n    function _extractChainIdFromV(uint256 v) internal pure returns (uint256 chainId) {\n        chainId = (v - 35) / 2;\n    }\n}\n"},"contracts/libraries/fusion/EcdsaValidatorLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport \"openzeppelin/utils/cryptography/MerkleProof.sol\";\nimport \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport \"account-abstraction/core/Helpers.sol\";\nimport \"../util/EcdsaLib.sol\";\nimport \"../util/UserOpLib.sol\";\n\nlibrary EcdsaValidatorLib {\n    /**\n     * This function parses the given userOpSignature into a Supertransaction signature\n     *\n     * Once parsed, the function will check for two conditions:\n     *      1. is the root supertransaction hash signed by the account owner's EOA\n     *      2. is the userOp actually a part of the given supertransaction\n     *\n     * If both conditions are met - outside contract can be sure that the expected signer has indeed\n     * approved the given userOp - and the userOp is successfully validate.\n     *\n     * @param userOp UserOp being validated.\n     * @param parsedSignature Signature provided as the userOp.signature parameter (minus the prepended tx type byte).\n     * @param expectedSigner Signer expected to be recovered when decoding the ERC20OPermit signature.\n     */\n    function validateUserOp(PackedUserOperation calldata userOp, bytes memory parsedSignature, address expectedSigner)\n        internal\n        view\n        returns (uint256)\n    {\n        (\n            bytes32 superTxHash,\n            bytes32[] memory proof,\n            uint48 lowerBoundTimestamp,\n            uint48 upperBoundTimestamp,\n            bytes memory userEcdsaSignature\n        ) = abi.decode(parsedSignature, (bytes32, bytes32[], uint48, uint48, bytes));\n\n        bytes32 calculatedUserOpHash = UserOpLib.getUserOpHash(userOp, lowerBoundTimestamp, upperBoundTimestamp);\n        if (!EcdsaLib.isValidSignature(expectedSigner, superTxHash, userEcdsaSignature)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        if (!MerkleProof.verify(proof, superTxHash, calculatedUserOpHash)) {\n            return SIG_VALIDATION_FAILED;\n        }\n\n        return _packValidationData(false, upperBoundTimestamp, lowerBoundTimestamp);\n    }\n\n    function validateSignatureForOwner(address owner, bytes32 hash, bytes memory parsedSignature)\n        internal\n        pure\n        returns (bool)\n    {\n        (\n            bytes32 superTxHash, //super tx hash\n            bytes32[] memory proof,\n            bytes memory userEcdsaSignature\n        ) = abi.decode(parsedSignature, (bytes32, bytes32[], bytes));\n\n        if (!EcdsaLib.isValidSignature(owner, superTxHash, userEcdsaSignature)) {\n            return false;\n        }\n\n        if (!MerkleProof.verify(proof, superTxHash, hash)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"},"contracts/libraries/fusion/UserOpValidatorLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport \"account-abstraction/core/Helpers.sol\";\nimport \"../util/EcdsaLib.sol\";\n\nlibrary UserOpValidatorLib {\n    /**\n     * Standard userOp validator - validates by simply checking if the userOpHash was signed by the account's EOA owner.\n     *\n     * @param userOpHash userOpHash being validated.\n     * @param parsedSignature Signature\n     * @param expectedSigner Signer expected to be recovered\n     */\n    function validateUserOp(bytes32 userOpHash, bytes memory parsedSignature, address expectedSigner)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (!EcdsaLib.isValidSignature(expectedSigner, userOpHash, parsedSignature)) {\n            return SIG_VALIDATION_FAILED;\n        }\n        return SIG_VALIDATION_SUCCESS;\n    }\n\n    function validateSignatureForOwner(address expectedSigner, bytes32 hash, bytes memory parsedSignature)\n        internal\n        pure\n        returns (bool)\n    {\n        return EcdsaLib.isValidSignature(expectedSigner, hash, parsedSignature);\n    }\n}\n"},"contracts/libraries/util/BytesLib.sol":{"content":"// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity ^0.8.27;\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for { let cc := add(_postBytes, 0x20) } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } { mstore(mc, mload(cc)) }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n    // 0 1 2 3 4\n    // x x x x x\n\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } { mstore(mc, mload(cc)) }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Sorts the pair (a, b) and hashes the result.\n     */\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"node_modules/account-abstraction/contracts/core/Helpers.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.23;\n\n/* solhint-disable no-inline-assembly */\n\n\n /*\n  * For simulation purposes, validateUserOp (and validatePaymasterUserOp)\n  * must return this value in case of signature failure, instead of revert.\n  */\nuint256 constant SIG_VALIDATION_FAILED = 1;\n\n\n/*\n * For simulation purposes, validateUserOp (and validatePaymasterUserOp)\n * return this value on success.\n */\nuint256 constant SIG_VALIDATION_SUCCESS = 0;\n\n\n/**\n * Returned data from validateUserOp.\n * validateUserOp returns a uint256, which is created by `_packedValidationData` and\n * parsed by `_parseValidationData`.\n * @param aggregator  - address(0) - The account validated the signature by itself.\n *                      address(1) - The account failed to validate the signature.\n *                      otherwise - This is an address of a signature aggregator that must\n *                                  be used to validate the signature.\n * @param validAfter  - This UserOp is valid only after this timestamp.\n * @param validaUntil - This UserOp is valid only up to this timestamp.\n */\nstruct ValidationData {\n    address aggregator;\n    uint48 validAfter;\n    uint48 validUntil;\n}\n\n/**\n * Extract sigFailed, validAfter, validUntil.\n * Also convert zero validUntil to type(uint48).max.\n * @param validationData - The packed validation data.\n */\nfunction _parseValidationData(\n    uint256 validationData\n) pure returns (ValidationData memory data) {\n    address aggregator = address(uint160(validationData));\n    uint48 validUntil = uint48(validationData >> 160);\n    if (validUntil == 0) {\n        validUntil = type(uint48).max;\n    }\n    uint48 validAfter = uint48(validationData >> (48 + 160));\n    return ValidationData(aggregator, validAfter, validUntil);\n}\n\n/**\n * Helper to pack the return value for validateUserOp.\n * @param data - The ValidationData to pack.\n */\nfunction _packValidationData(\n    ValidationData memory data\n) pure returns (uint256) {\n    return\n        uint160(data.aggregator) |\n        (uint256(data.validUntil) << 160) |\n        (uint256(data.validAfter) << (160 + 48));\n}\n\n/**\n * Helper to pack the return value for validateUserOp, when not using an aggregator.\n * @param sigFailed  - True for signature failure, false for success.\n * @param validUntil - Last timestamp this UserOperation is valid (or zero for infinite).\n * @param validAfter - First timestamp this UserOperation is valid.\n */\nfunction _packValidationData(\n    bool sigFailed,\n    uint48 validUntil,\n    uint48 validAfter\n) pure returns (uint256) {\n    return\n        (sigFailed ? 1 : 0) |\n        (uint256(validUntil) << 160) |\n        (uint256(validAfter) << (160 + 48));\n}\n\n/**\n * keccak function over calldata.\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\n */\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\n        assembly (\"memory-safe\") {\n            let mem := mload(0x40)\n            let len := data.length\n            calldatacopy(mem, data.offset, len)\n            ret := keccak256(mem, len)\n        }\n    }\n\n\n/**\n * The minimum of two numbers.\n * @param a - First number.\n * @param b - Second number.\n */\n    function min(uint256 a, uint256 b) pure returns (uint256) {\n        return a < b ? a : b;\n    }\n"},"contracts/interfaces/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.27;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external view returns (bytes32);\n}\n"},"contracts/libraries/util/EcdsaLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\n\nlibrary EcdsaLib {\n    using MessageHashUtils for bytes32;\n    using ECDSA for bytes32;\n\n    function isValidSignature(address expectedSigner, bytes32 hash, bytes memory signature)\n        internal\n        pure\n        returns (bool)\n    {\n        if (_recoverSigner(hash, signature) == expectedSigner) return true;\n        if (_recoverSigner(hash.toEthSignedMessageHash(), signature) == expectedSigner) return true;\n        return false;\n    }\n\n    function _recoverSigner(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address owner,,) = hash.tryRecover(signature);\n        return owner;\n    }\n}\n"},"contracts/libraries/util/UserOpLib.sol":{"content":"// SPDX-License-Identifier: Unlicense\n/*\n * @title UserOp Lib\n *\n * @dev Calculates userOp hash for the new type of transaction - SuperTransaction (as a part of MEE stack)\n */\npragma solidity ^0.8.27;\n\nimport \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport \"account-abstraction/core/UserOperationLib.sol\";\n\nlibrary UserOpLib {\n    using UserOperationLib for PackedUserOperation;\n\n    /**\n     * Calculates userOp hash. Almost works like a regular 4337 userOp hash with few fields added.\n     *\n     * @param userOp userOp to calculate the hash for\n     * @param lowerBoundTimestamp lower bound timestamp set when constructing userOp\n     * @param upperBoundTimestamp upper bound timestamp set when constructing userOp\n     */\n    function getUserOpHash(\n        PackedUserOperation calldata userOp,\n        uint256 lowerBoundTimestamp,\n        uint256 upperBoundTimestamp\n    ) internal view returns (bytes32 userOpHash) {\n        userOpHash = keccak256(\n            bytes.concat(keccak256(abi.encode(userOp.hash(), lowerBoundTimestamp, upperBoundTimestamp, block.chainid)))\n        );\n    }\n}\n"},"contracts/libraries/rlp/RLPDecoder.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.27;\n\nlibrary RLPDecoder {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /**\n     * RLPItem conversions into data types *\n     */\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) { result := div(result, exp(256, sub(32, len))) }\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"},"contracts/libraries/rlp/RLPEncoder.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.27;\n\nimport \"../util/BytesLib.sol\";\n\n/**\n * @title RLPEncoder\n * @dev A simple RLP encoding library.\n * @author Bakaoh\n */\nlibrary RLPEncoder {\n    using BytesLib for bytes;\n\n    /*\n     * Internal functions\n     */\n\n    /**\n     * @dev RLP encodes a byte string.\n     * @param self The byte string to encode.\n     * @return The RLP encoded string in bytes.\n     */\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\n        bytes memory encoded;\n        if (self.length == 1 && uint8(self[0]) < 128) {\n            encoded = self;\n        } else {\n            encoded = encodeLength(self.length, 128).concat(self);\n        }\n        return encoded;\n    }\n\n    /**\n     * @dev RLP encodes a uint.\n     * @param self The uint to encode.\n     * @return The RLP encoded uint in bytes.\n     */\n    function encodeUint(uint256 self) internal pure returns (bytes memory) {\n        return encodeBytes(toBinary(self));\n    }\n\n    /**\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\n     * @param self The length of the string or the payload.\n     * @param offset 128 if item is string, 192 if item is list.\n     * @return RLP encoded bytes.\n     */\n    function encodeLength(uint256 self, uint256 offset) internal pure returns (bytes memory) {\n        bytes memory encoded;\n        if (self < 56) {\n            encoded = new bytes(1);\n            encoded[0] = bytes32(self + offset)[31];\n        } else {\n            uint256 lenLen;\n            uint256 i = 1;\n            while (self / i != 0) {\n                lenLen++;\n                i *= 256;\n            }\n\n            encoded = new bytes(lenLen + 1);\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\n            for (i = 1; i <= lenLen; i++) {\n                encoded[i] = bytes32((self / (256 ** (lenLen - i))) % 256)[31];\n            }\n        }\n        return encoded;\n    }\n\n    /*\n     * Private functions\n     */\n\n    /**\n     * @dev Encode integer in big endian binary form with no leading zeroes.\n     * @notice TODO: This should be optimized with assembly to save gas costs.\n     * @param _x The integer to encode.\n     * @return RLP encoded bytes.\n     */\n    function toBinary(uint256 _x) private pure returns (bytes memory) {\n        bytes memory b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), _x)\n        }\n        uint256 i;\n        for (i = 0; i < 32; i++) {\n            if (b[i] != 0) {\n                break;\n            }\n        }\n        bytes memory res = new bytes(32 - i);\n        for (uint256 j = 0; j < res.length; j++) {\n            res[j] = b[i++];\n        }\n        return res;\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"},"node_modules/account-abstraction/contracts/core/UserOperationLib.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.23;\n\n/* solhint-disable no-inline-assembly */\n\nimport \"../interfaces/PackedUserOperation.sol\";\nimport {calldataKeccak, min} from \"./Helpers.sol\";\n\n/**\n * Utility functions helpful when working with UserOperation structs.\n */\nlibrary UserOperationLib {\n\n    uint256 public constant PAYMASTER_VALIDATION_GAS_OFFSET = 20;\n    uint256 public constant PAYMASTER_POSTOP_GAS_OFFSET = 36;\n    uint256 public constant PAYMASTER_DATA_OFFSET = 52;\n    /**\n     * Get sender from user operation data.\n     * @param userOp - The user operation data.\n     */\n    function getSender(\n        PackedUserOperation calldata userOp\n    ) internal pure returns (address) {\n        address data;\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\n        assembly {\n            data := calldataload(userOp)\n        }\n        return address(uint160(data));\n    }\n\n    /**\n     * Relayer/block builder might submit the TX with higher priorityFee,\n     * but the user should not pay above what he signed for.\n     * @param userOp - The user operation data.\n     */\n    function gasPrice(\n        PackedUserOperation calldata userOp\n    ) internal view returns (uint256) {\n        unchecked {\n            (uint256 maxPriorityFeePerGas, uint256 maxFeePerGas) = unpackUints(userOp.gasFees);\n            if (maxFeePerGas == maxPriorityFeePerGas) {\n                //legacy mode (for networks that don't support basefee opcode)\n                return maxFeePerGas;\n            }\n            return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n        }\n    }\n\n    /**\n     * Pack the user operation data into bytes for hashing.\n     * @param userOp - The user operation data.\n     */\n    function encode(\n        PackedUserOperation calldata userOp\n    ) internal pure returns (bytes memory ret) {\n        address sender = getSender(userOp);\n        uint256 nonce = userOp.nonce;\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\n        bytes32 accountGasLimits = userOp.accountGasLimits;\n        uint256 preVerificationGas = userOp.preVerificationGas;\n        bytes32 gasFees = userOp.gasFees;\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\n\n        return abi.encode(\n            sender, nonce,\n            hashInitCode, hashCallData,\n            accountGasLimits, preVerificationGas, gasFees,\n            hashPaymasterAndData\n        );\n    }\n\n    function unpackUints(\n        bytes32 packed\n    ) internal pure returns (uint256 high128, uint256 low128) {\n        return (uint128(bytes16(packed)), uint128(uint256(packed)));\n    }\n\n    //unpack just the high 128-bits from a packed value\n    function unpackHigh128(bytes32 packed) internal pure returns (uint256) {\n        return uint256(packed) >> 128;\n    }\n\n    // unpack just the low 128-bits from a packed value\n    function unpackLow128(bytes32 packed) internal pure returns (uint256) {\n        return uint128(uint256(packed));\n    }\n\n    function unpackMaxPriorityFeePerGas(PackedUserOperation calldata userOp)\n    internal pure returns (uint256) {\n        return unpackHigh128(userOp.gasFees);\n    }\n\n    function unpackMaxFeePerGas(PackedUserOperation calldata userOp)\n    internal pure returns (uint256) {\n        return unpackLow128(userOp.gasFees);\n    }\n\n    function unpackVerificationGasLimit(PackedUserOperation calldata userOp)\n    internal pure returns (uint256) {\n        return unpackHigh128(userOp.accountGasLimits);\n    }\n\n    function unpackCallGasLimit(PackedUserOperation calldata userOp)\n    internal pure returns (uint256) {\n        return unpackLow128(userOp.accountGasLimits);\n    }\n\n    function unpackPaymasterVerificationGasLimit(PackedUserOperation calldata userOp)\n    internal pure returns (uint256) {\n        return uint128(bytes16(userOp.paymasterAndData[PAYMASTER_VALIDATION_GAS_OFFSET : PAYMASTER_POSTOP_GAS_OFFSET]));\n    }\n\n    function unpackPostOpGasLimit(PackedUserOperation calldata userOp)\n    internal pure returns (uint256) {\n        return uint128(bytes16(userOp.paymasterAndData[PAYMASTER_POSTOP_GAS_OFFSET : PAYMASTER_DATA_OFFSET]));\n    }\n\n    function unpackPaymasterStaticFields(\n        bytes calldata paymasterAndData\n    ) internal pure returns (address paymaster, uint256 validationGasLimit, uint256 postOpGasLimit) {\n        return (\n            address(bytes20(paymasterAndData[: PAYMASTER_VALIDATION_GAS_OFFSET])),\n            uint128(bytes16(paymasterAndData[PAYMASTER_VALIDATION_GAS_OFFSET : PAYMASTER_POSTOP_GAS_OFFSET])),\n            uint128(bytes16(paymasterAndData[PAYMASTER_POSTOP_GAS_OFFSET : PAYMASTER_DATA_OFFSET]))\n        );\n    }\n\n    /**\n     * Hash the user operation data.\n     * @param userOp - The user operation data.\n     */\n    function hash(\n        PackedUserOperation calldata userOp\n    ) internal pure returns (bytes32) {\n        return keccak256(encode(userOp));\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"}},"settings":{"remappings":["openzeppelin/=node_modules/@openzeppelin/contracts/","account-abstraction/=node_modules/account-abstraction/contracts/","erc7739Validator/=node_modules/erc7739-validator-base/src/","solady/=node_modules/solady/src/","forge-std/=lib/forge-std/src/","@ERC4337/=node_modules/@ERC4337/","@erc7579/=node_modules/@erc7579/","@gnosis.pm/=node_modules/@gnosis.pm/","@openzeppelin/=node_modules/@openzeppelin/","@prb/=node_modules/@prb/","@prb/math/=node_modules/erc7739-validator-base/node_modules/@prb/math/src/","@rhinestone/=node_modules/@rhinestone/","@safe-global/=node_modules/@safe-global/","@zerodev/=node_modules/@zerodev/","ExcessivelySafeCall/=node_modules/erc7739-validator-base/node_modules/excessively-safe-call/src/","account-abstraction-v0.6/=node_modules/account-abstraction-v0.6/","ds-test/=node_modules/ds-test/","enumerableset4337/=node_modules/erc7739-validator-base/node_modules/@erc7579/enumerablemap4337/src/","erc4337-validation/=node_modules/erc7739-validator-base/node_modules/@rhinestone/erc4337-validation/src/","erc7579/=node_modules/erc7579/","erc7739-validator-base/=node_modules/erc7739-validator-base/","excessively-safe-call/=node_modules/excessively-safe-call/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/","kernel/=node_modules/erc7739-validator-base/node_modules/@zerodev/kernel/src/","module-bases/=node_modules/erc7739-validator-base/node_modules/@rhinestone/module-bases/src/","modulekit/=node_modules/erc7739-validator-base/node_modules/@rhinestone/modulekit/src/","safe7579/=node_modules/erc7739-validator-base/node_modules/@rhinestone/safe7579/src/","sentinellist/=node_modules/erc7739-validator-base/node_modules/@rhinestone/sentinellist/src/","solarray/=node_modules/solarray/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"useLiteralContent":false,"bytecodeHash":"none","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":false,"libraries":{}}}
