{"language":"Solidity","sources":{"contracts/forwarder/Forwarder.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n/**\n * @title EtherForwarder\n * @dev A contract that forwards received Ether to a specified address\n */\ncontract EtherForwarder {\n    error ZeroAddress();\n    error ForwardFailed();\n    error UseForwardFunction();\n\n    /**\n     * @dev Forwards the received Ether to the specified destination address\n     * @param destination The address to forward the Ether to\n     */\n    function forward(address destination) external payable {\n        if (destination == address(0)) revert ZeroAddress();\n\n        // Forward the Ether using assembly\n        bool success;\n        assembly {\n            // Gas-efficient way to forward ETH\n            success :=\n                call(\n                    gas(), // Forward all available gas\n                    destination, // Destination address\n                    callvalue(), // Amount of ETH to send\n                    0, // No data to send\n                    0, // No data size\n                    0, // No data to receive\n                    0 // No data size to receive\n                )\n        }\n\n        if (!success) revert ForwardFailed();\n    }\n\n    /**\n     * @dev Prevents accidental Ether transfers without a destination\n     */\n    receive() external payable {\n        revert(\"Use forward() function to send Ether\");\n    }\n\n    /**\n     * @dev Prevents accidental Ether transfers without a destination\n     */\n    fallback() external payable {\n        revert(\"Use forward() function to send Ether\");\n    }\n}\n"}},"settings":{"remappings":["openzeppelin/=node_modules/@openzeppelin/contracts/","account-abstraction/=node_modules/account-abstraction/contracts/","erc7739Validator/=node_modules/erc7739-validator-base/src/","solady/=node_modules/solady/src/","forge-std/=lib/forge-std/src/","erc7579/=node_modules/erc7579/src/","EnumerableSet4337/=node_modules/@erc7579/enumerablemap4337/src/","byteslib/=node_modules/solidity-bytes-utils/contracts/","rlp-reader/=node_modules/Solidity-RLP/contracts/","murky-trees/=node_modules/murky/src/","sentinellist/=node_modules/@rhinestone/sentinellist/src/","@ERC4337/=node_modules/@ERC4337/","@erc7579/=node_modules/@erc7579/","@gnosis.pm/=node_modules/@gnosis.pm/","@openzeppelin/=node_modules/@openzeppelin/","@prb/=node_modules/@prb/","@rhinestone/=node_modules/@rhinestone/","@safe-global/=node_modules/@safe-global/","@zerodev/=node_modules/@zerodev/","ExcessivelySafeCall/=node_modules/erc7739-validator-base/node_modules/excessively-safe-call/src/","account-abstraction-v0.6/=node_modules/account-abstraction-v0.6/","ds-test/=node_modules/ds-test/","enumerablemap4337/=node_modules/enumerablemap4337/","enumerableset4337/=node_modules/erc7739-validator-base/node_modules/@erc7579/enumerablemap4337/src/","erc4337-validation/=node_modules/erc7739-validator-base/node_modules/@rhinestone/erc4337-validation/src/","erc7739-validator-base/=node_modules/erc7739-validator-base/","excessively-safe-call/=node_modules/excessively-safe-call/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/","kernel/=node_modules/erc7739-validator-base/node_modules/@zerodev/kernel/src/","module-bases/=node_modules/erc7739-validator-base/node_modules/@rhinestone/module-bases/src/","modulekit/=node_modules/erc7739-validator-base/node_modules/@rhinestone/modulekit/src/","murky/=node_modules/murky/","safe7579/=node_modules/erc7739-validator-base/node_modules/@rhinestone/safe7579/src/","solarray/=node_modules/solarray/","solidity-bytes-utils/=node_modules/solidity-bytes-utils/","solidity-rlp/=node_modules/solidity-rlp/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"useLiteralContent":false,"bytecodeHash":"none","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":true,"libraries":{}}}
